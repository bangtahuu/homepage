{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,0GCY5BC,MARf,WACE,OACE,mDCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCmJNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDpC3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5324845a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div >\n      Nothing todo here\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import {IndexPage} from './containers/IndexPage';\n// import {LoginPage} from './containers/LoginPage';\n// import * as serviceWorker from './serviceWorker';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import 'semantic-ui-css/semantic.min.css';\n// import {\n//     Dimmer, Image,\n//     Loader, Segment\n// } from 'semantic-ui-react';\n// import {ToastContainer} from \"react-toastify\";\n//\n// class ThaiBinhHotel extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             isTokenValid: false,\n//             userInfo: {\n//                 token: sessionStorage.getItem('tokenTBh'),\n//                 email: sessionStorage.getItem('emailTBh'),\n//                 ipAddress: \"\"\n//             },\n//             isChecking: true,\n//         };\n//         [\n//             'checkTokenValid',\n//             'getIPAndCheckToken',\n//             'setTokenValid'\n//         ].forEach((method) => this[method] = this[method].bind(this));\n//     }\n//\n//     setTokenValid(username, token) {\n//         // debugger;\n//         let userInfo = {...this.state.userInfo};\n//         userInfo.email = username;\n//         userInfo.token = token\n//         this.setState({\n//             isTokenValid: true,\n//             userInfo: userInfo\n//         });\n//     }\n//\n//     getIPAndCheckToken() {\n//         this.setState({\n//             isChecking: true,\n//         });\n//         fetch(\"https://api.ipify.org/?format=json\", {\n//             method: \"GET\",\n//             // body: JSON.stringify(data),\n//             headers: {\n//                 \"Content-Type\": \"application/json\"\n//             },\n//         }).then(res => res.json())\n//             .then(\n//                 (result) => {\n//                     console.log(result[\"ip\"]);\n//\n//                     let userInfo = {...this.state.userInfo};\n//                     userInfo['ipAddress'] = result[\"ip\"]\n//                     this.setState({\n//                         userInfo: userInfo\n//                     });\n//\n//                     if (!this.state.userInfo.token) {\n//                         this.setState({\n//                             isChecking: false\n//                         });\n//                         return;\n//                     }\n//\n//                     this.checkTokenValid(result[\"ip\"])\n//                 }, (error) => {\n//                     console.log(error);\n//                 }\n//             )\n//     }\n//\n//     async checkTokenValid(ipAddress) {\n//         // let token = sessionStorage.getItem('tokenTBh');\n//         // let email = sessionStorage.getItem('emailTBh');\n//         // let ipAddress = this.getIPAddress();\n//         let encoded = \"token=\" + this.state.userInfo.token +\n//             \"&email=\" + this.state.userInfo.email +\n//             \"&ipAddress=\" + ipAddress;\n//\n//         console.log(encoded);\n//\n//         let isValid = false;\n//         fetch('https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=checkToken', {\n//             method: 'POST',\n//             body: encoded,\n//             headers: {\n//                 \"Content-type\": \"application/x-www-form-urlencoded\"\n//             }\n//         }).then(async function (response) {\n//             let msgerr = '';\n//             await response.json().then(function (data) {\n//                 console.log(data);\n//                 data['result'] == 'error' ? msgerr = JSON.stringify(data[\"error\"]) : isValid = true;\n//             });\n//         }).then(() => {\n//             if (isValid) {\n//                 this.setState({\n//                     isTokenValid: true,\n//                     isChecking: false\n//                 });\n//             } else {\n//                 this.setState({\n//                     isTokenValid: false,\n//                     isChecking: false\n//                 });\n//             }\n//         })\n//     }\n//\n//     componentDidMount() {\n//         // sessionStorage.setItem('tokenTBh', 'fb28ea0172706c801ce7d4e1d4edcb5f');\n//         // sessionStorage.setItem('emailTBh', 'bang.th@mobivi.vn');\n//         if (!this.state.userInfo.token) {\n//             this.setState({\n//                 isTokenValid: false,\n//                 isChecking: false\n//             });\n//         }\n//         this.getIPAndCheckToken();\n//     }\n//\n//     render() {\n//         let isTokenValid = this.state.isTokenValid;\n//         if (this.state.isChecking) {\n//             // return <Loader size=\"massive\" active inline='centered'>System is checking your permission...</Loader>\n//             return <Segment>\n//                 <Dimmer active inverted>\n//                     <Loader size='large'>System is checking your permission...</Loader>\n//                 </Dimmer>\n//                 <Image src='images/loader.png'/>\n//             </Segment>\n//         }\n//         return (\n//             <div>\n//                 <ToastContainer style={{fontSize: '20px', textAlign: 'center'}}/>\n//                 {isTokenValid ?\n//                     <IndexPage userInfo={this.state.userInfo}/>\n//                     :\n//                     <LoginPage ipAddress={this.state.userInfo.ipAddress} setTokenValid={this.setTokenValid}/>}\n//             </div>\n//         )\n//     }\n// }\n//\n// ReactDOM.render(<ThaiBinhHotel/>, document.getElementById('root'));\n//\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// // serviceWorker.unregister();\n// serviceWorker.register();\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}