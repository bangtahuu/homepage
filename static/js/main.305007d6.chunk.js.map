{"version":3,"sources":["components/ListOption.js","components/RoomDetail.js","components/ListRoomRows.js","components/RoomDetailModel.js","containers/IndexPage.js","serviceWorker.js","index.js"],"names":["users","ListOption","state","items","slice","handleAdd","setState","prevState","length","handleRemove","this","console","log","Icon","disabled","name","Button","Group","icon","onClick","map","item","List","Item","key","Component","Moment","locale","momentLocalizer","RoomDetail","props","open","CheckinTimeSelected","roominfo","fromTime","Date","roomCurrentClass","forEach","method","bind","link","window","location","href","status","stt","statusList","i","text","val","event","roomTypeOther","imgsrc","roomid","Modal","closeIcon","trigger","className","style","boxShadow","src","alt","Header","Content","image","scrolling","height","Image","size","wrapped","Description","roomDescription","getStatusDes","value","onChange","onChangePickedTime","Form","Select","fluid","label","options","handleChangeTypeIDSelect","placeholder","Actions","primary","redirectLink","React","ListRoomRows","room","roomsInfo","Array","prototype","call","renderDetail","backgroundColor","renderRow","defaultProps","IndexPage","isLoaded","Name","Company","Phone","Product","Company_Address","RangeIncome","isICMCenter","rooms","roomIds","statusIds","roomTypeOtherIds","roomidselected","statusSelected","fetch","then","res","json","result","strs","ids","tmp","tmp2","JSON","parse","push","error","body","headers","response","listRoomIds","listStatusIds","Input","action","widths","handleChangeRoomIDSelect","handleChangeStatusIDSelect","getListRoomDetails","getListStatus","getroomTypeOther","Segment","Dimmer","active","inverted","Loader","renderSearchForm","renderListRooms","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ThaiBinhHotel","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.305007d6.chunk.js","sourcesContent":["import _ from 'lodash'\nimport React, { Component } from 'react'\nimport { Button, Image, List, Transition } from 'semantic-ui-react'\nimport { Icon } from 'semantic-ui-react'\n\nconst users = ['ade', 'chris', 'christian', 'daniel', 'elliot', 'helen']\n\nexport class ListOption extends Component {\n    state = { items: users.slice(0, 3) }\n\n    handleAdd = () =>\n        this.setState((prevState) => ({\n            items: users.slice(0, prevState.items.length + 1),\n        }))\n\n    handleRemove = () =>\n        this.setState((prevState) => ({ items: prevState.items.slice(0, -1) }))\n\n    render() {\n        const { items } = this.state\n        console.log(items);\n        return (\n            <div>\n                <Icon disabled name='users' />\n                <Button.Group>\n                    <Button\n                        disabled={items.length === 0}\n                        icon='minus'\n                        onClick={this.handleRemove}\n                    />\n\n                    <Button\n                        disabled={items.length === users.length}\n                        icon='plus'\n                        onClick={this.handleAdd}\n                    />\n                </Button.Group>\n\n\n                    {items.map((item) => (\n                        <List.Item key={item}>\n                            <p>{item}</p>\n                        </List.Item>\n                    ))}\n            </div>\n        )\n    }\n}","import React from 'react'\nimport {Button, Form, Header, Icon, Image, Modal} from 'semantic-ui-react'\nimport PropTypes from \"prop-types\";\nimport Moment from 'moment'\nimport momentLocalizer from 'react-widgets-moment';\nimport DateTimePicker from 'react-widgets/lib/DateTimePicker';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport { ListOption } from '../components/ListOption';\nimport 'semantic-ui-css/semantic.min.css';\n\nMoment.locale('vn')\nmomentLocalizer()\n\n\nexport class RoomDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            CheckinTimeSelected: (this.props.roominfo.fromTime ? new Date(this.props.roominfo.fromTime) : new Date()),\n            roomCurrentClass: (this.props.roominfo.roomCurrentClass ? this.props.roominfo.roomCurrentClass : ''),\n        };\n\n        [\n            'redirectLink',\n            'getStatusDes',\n            'onChangePickedTime',\n            'handleChangeTypeIDSelect'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    redirectLink() {\n        let link = window.location.href;\n        window.location.href = link;\n    }\n\n    getStatusDes(status = '') {\n        let stt = this.props.statusList;\n        for (var i = 0; i < stt.length; i++) {\n            if (stt[i].key == status) {\n                return stt[i].text;\n            }\n        }\n    }\n\n    onChangePickedTime(val) {\n        this.setState({\n            CheckinTimeSelected: val\n        });\n    }\n\n    handleChangeTypeIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            roomCurrentClass: val['value']\n        });\n    }\n\n    render() {\n        const {roominfo, roomTypeOther} = this.props;\n        let imgsrc = roominfo.roomid ? 'images/room' + roominfo.roomid + '.png' : 'images/room101.png';\n\n        return (\n            <Modal closeIcon trigger={<a className=\"image fit\"><img style={{boxShadow: '10px 10px 5px #ccc'}}\n                                                                    src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>}>\n                <Modal.Header>Room Detail</Modal.Header>\n                <Modal.Content image scrolling style={{height: '250%'}}>\n                    <Image size='medium' src={imgsrc} wrapped/>\n\n                    <Modal.Description>\n                        <Header>{roominfo.roomDescription}</Header>\n                        <p>\n                            Status: {this.getStatusDes(roominfo.status)}\n                        </p>\n                        <hr/>\n                        <label>\n                            <b>Checkin:</b>\n                        </label>\n                        <div>\n                            <DateTimePicker value={this.state.CheckinTimeSelected} onChange={this.onChangePickedTime}/>\n                        </div>\n                        <hr/>\n                        <div>\n                            <Form.Select\n                                fluid\n                                label='Room Type:'\n                                value={this.state.roomCurrentClass}\n                                options={roomTypeOther}\n                                onChange={this.handleChangeTypeIDSelect}\n                                placeholder='Type'\n                            />\n                        </div>\n                        <hr/>\n                        <p>Add Options:</p>\n                        <ListOption />\n                    </Modal.Description>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button primary onClick={this.redirectLink}>\n                        {/*<a href=\"http://localhost:3000/\" style={{color: 'white'}}>Proceed</a>*/}\n                        Proceed\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        );\n    }\n}\n\n\nRoomDetail.propTypes = {\n    roominfo: PropTypes.object,\n    statusList: PropTypes.array,\n    roomTypeOther: PropTypes.array\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Image, Rail, Segment } from 'semantic-ui-react';\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react';\nimport { RoomDetail } from '../components/RoomDetail';\nimport { RoomDetailModel } from '../components/RoomDetailModel';\nimport 'semantic-ui-css/semantic.min.css';\n\nexport class ListRoomRows extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          open: false\n        };\n\n        [\n            'renderRow',\n            'refreshPage'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    refreshPage(){\n\n    }\n\n    renderDetail(room = []){\n        return <RoomDetail roominfo={room} statusList={this.props.statusList} roomTypeOther={this.props.roomTypeOther}/>;\n    }\n\n    renderRow() {\n        const {roomsInfo} = this.props;\n        return Array.prototype.map.call(roomsInfo, (room) => (\n            <div className=\"col-3 col-12-mobile\" key={room.roomid}>\n                <article className=\"item\">\n                    <div className=\"image fitfull\">\n                        {this.renderDetail(room)}\n                        {/*<a className=\"image fit\"><img style={{boxShadow: '10px 10px 5px #ccc'}} src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>*/}\n                    </div>\n                    <header>\n                        {room.status == 1 ? <h2 style={{backgroundColor: '#e1eaea'}}>Room {room.roomid}</h2> : <h2 style={{backgroundColor: '#ffd633'}}>Room {room.roomid}</h2>}\n                    </header>\n                </article>\n            </div>\n        ));\n    }\n\n    render() {\n        // console.log(this.props.roomInfo);\n        return (\n            <div className=\"row\">\n                {this.renderRow()}\n            </div>\n\n        );\n    }\n}\n\nListRoomRows.defaultProps = {\n    roomsInfo: []\n}\n\nListRoomRows.propTypes = {\n    roomsInfo: PropTypes.array,\n    statusList: PropTypes.array,\n    roomTypeOther: PropTypes.array\n}\n\n","import React, { Component } from 'react'\nimport { Button, Header, Image, Modal } from 'semantic-ui-react'\n\nexport class RoomDetailModel extends Component {\n    state = { open: false }\n\n    show = (dimmer) => () => this.setState({ dimmer, open: true })\n    close = () => this.setState({ open: false })\n\n    render() {\n        const { open, dimmer } = this.state\n\n        return (\n            <div>\n                <Button onClick={this.show(true)}>Default</Button>\n                <Button onClick={this.show('inverted')}>Inverted</Button>\n                <Button onClick={this.show('blurring')}>Blurring</Button>\n                <a className=\"image fit\"><img onClick={this.show('blurring')} style={{boxShadow: '10px 10px 5px #ccc'}} src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>\n\n                <Modal dimmer={dimmer} open={open} onClose={this.close}>\n                    <Modal.Header>Select a Photo</Modal.Header>\n                    <Modal.Content image>\n                        <Image\n                            wrapped\n                            size='medium'\n                            src='https://react.semantic-ui.com/images/avatar/large/rachel.png'\n                        />\n                        <Modal.Description>\n                            <Header>Default Profile Image</Header>\n                            <p>\n                                We've found the following gravatar image associated with your\n                                e-mail address.\n                            </p>\n                            <p>Is it okay to use this photo?</p>\n                        </Modal.Description>\n                    </Modal.Content>\n                    <Modal.Actions>\n                        <Button color='black' onClick={this.close}>\n                            Nope\n                        </Button>\n                        <Button\n                            positive\n                            icon='checkmark'\n                            labelPosition='right'\n                            content=\"Yep, that's me\"\n                            onClick={this.close}\n                        />\n                    </Modal.Actions>\n                </Modal>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Form} from 'semantic-ui-react';\nimport {Button, Card, Image} from 'semantic-ui-react';\nimport {Input} from 'semantic-ui-react';\nimport {Loader, Segment} from 'semantic-ui-react';\nimport {ListRoomRows} from '../components/ListRoomRows';\nimport { Dimmer } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nexport class IndexPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            room: {\n                Name: '',\n                Company: '',\n                Phone: '',\n                Product: '',\n                Company_Address: '',\n                RangeIncome: '',\n                isICMCenter: '',\n            },\n            rooms: [],\n            roomIds: [],\n            status: [],\n            statusIds: [],\n            roomTypeOther: [],\n            roomTypeOtherIds: [],\n            roomidselected: '',\n            statusSelected: ''\n        };\n\n        [\n            'getListRoomDetails',\n            'setListRoom',\n            'handleChangeRoomIDSelect',\n            'handleChangeStatusIDSelect',\n            'getListStatus',\n            'renderSearchForm',\n            'renderListRooms',\n            'getroomTypeOther'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n\n    getListRoomDetails() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listRoomsDetail\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['roomid'];\n                        tmp2['text'] = tmp['roomDescription'];\n                        tmp2['value'] = tmp['roomid'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        isLoaded: true,\n                        rooms: strs,\n                        roomIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    getListStatus() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listStatus\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['statusId'];\n                        tmp2['text'] = tmp['description'];\n                        tmp2['value'] = tmp['statusId'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        status: strs,\n                        statusIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    getroomTypeOther() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=PricebyOther\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['roomType'];\n                        tmp2['text'] = tmp['description'];\n                        tmp2['value'] = tmp['roomType'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        roomTypeOther: strs,\n                        roomTypeOtherIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    setListRoom() {\n        let Name = \"1\";\n        let Phone = \"2\";\n        let Company = \"3\";\n        let Company_Address = \"4\";\n        let isICMCenter = \"5\";\n        let RangeIncome = \"6\";\n        let Product = \"7\";\n        let encoded = \"Name=\" + Name + \"&Phone=\" + Phone + \"&Company=\" + Company + \"&Company_Address=\" + Company_Address + \"&isICMCenter=\" + isICMCenter + \"&RangeIncome=\" + RangeIncome + \"&Product=\" + Product;\n\n        fetch('https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec', {\n            method: 'POST',\n            body: encoded,\n            // body: JSON.stringify({\n            //     title: 'New title added',\n            //     body: 'New body added. Hello body.'\n            // }),\n            headers: {\n                \"Content-type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(response => {\n            console.log(response.json());\n        }).then(json => {\n            console.log(json);\n            // this.setState({\n            //     user:json\n            // });\n        });\n    }\n\n    renderSearchForm() {\n        let listRoomIds = this.state.roomIds;\n        let listStatusIds = this.state.statusIds;\n\n        return (\n            <div>\n                <Input fluid icon='search' action='Search' placeholder='Search...'/>\n                <br/>\n                <Form.Group widths='equal'>\n                    <Form.Select\n                        fluid\n                        label='RoomID'\n                        onChange={this.handleChangeRoomIDSelect}\n                        options={listRoomIds}\n                        placeholder='RoomIDs'\n                    />\n                    <Form.Select\n                        fluid\n                        label='Status'\n                        options={listStatusIds}\n                        onChange={this.handleChangeStatusIDSelect}\n                        placeholder='Status'\n                    />\n                </Form.Group>\n            </div>\n        );\n    }\n\n    renderListRooms() {\n        return (\n            <ListRoomRows roomsInfo={this.state.rooms} statusList={this.state.statusIds} roomTypeOther={this.state.roomTypeOtherIds}/>\n        );\n    }\n\n    handleChangeRoomIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            roomidselected: val['value']\n        });\n    }\n\n    handleChangeStatusIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            statusSelected: val['value']\n        });\n    }\n\n    componentDidMount() {\n        this.getListRoomDetails();\n        this.getListStatus();\n        this.getroomTypeOther();\n    }\n\n    render() {\n        if (this.state.isLoaded == false) {\n            return (<Segment>\n                        <Dimmer active inverted>\n                            <Loader size='large'>Loading</Loader>\n                        </Dimmer>\n                        <Image src='images/loader.png'/>\n                    </Segment>);\n        }\n        // console.log(this.state.statusIds);\n        // console.log(this.state.statusSelected);\n        return (\n            <div>\n                <Form>\n                    {this.renderSearchForm()}\n                    {this.renderListRooms()}\n                </Form>\n                <br/><br/>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {IndexPage} from './containers/IndexPage';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css'\n\nclass ThaiBinhHotel extends React.Component{\n    render(){\n        return <IndexPage/>;\n        // return <div>aaa</div>;\n    }\n}\n\nReactDOM.render(<ThaiBinhHotel />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}