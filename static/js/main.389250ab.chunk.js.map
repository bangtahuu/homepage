{"version":3,"sources":["containers/IndexPage.js","serviceWorker.js","index.js"],"names":["IndexPage","props","state","isLoaded","room","Name","Company","Phone","Product","Company_Address","RangeIncome","isICMCenter","rooms","roomIds","status","statusIds","roomidselected","statusSelected","forEach","method","bind","fetch","then","res","json","result","strs","ids","tmp","tmp2","i","length","JSON","parse","push","setState","error","body","headers","response","console","log","listRoomIds","this","listStatusIds","Input","fluid","icon","action","placeholder","Form","Group","widths","Select","label","onChange","handleChangeRoomIDSelect","options","handleChangeStatusIDSelect","className","src","alt","event","val","getListRoomDetails","getListStatus","Segment","Loader","active","Image","renderSearchForm","renderListRooms","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ThaiBinhHotel","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.389250ab.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n// import {Card,Button, Form, Row, Col, FormControl, FormCheck} from 'react-bootstrap';\nimport {Form} from 'semantic-ui-react';\nimport {Button, Card, Image} from 'semantic-ui-react';\nimport {Input} from 'semantic-ui-react';\nimport {Icon, Label} from 'semantic-ui-react';\nimport {Loader, Segment} from 'semantic-ui-react'\n\n\nexport class IndexPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            room: {\n                Name: '',\n                Company: '',\n                Phone: '',\n                Product: '',\n                Company_Address: '',\n                RangeIncome: '',\n                isICMCenter: '',\n            },\n            rooms: [],\n            roomIds: [],\n            status: [],\n            statusIds: [],\n            roomidselected: '',\n            statusSelected: ''\n        };\n\n        [\n            'getListRoomDetails',\n            'setListRoom',\n            'handleChangeRoomIDSelect',\n            'handleChangeStatusIDSelect',\n            'getListStatus',\n            'renderSearchForm',\n            'renderListRooms'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n\n    getListRoomDetails() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listRoomsDetail\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['roomid'];\n                        tmp2['text'] = tmp['roomDescription'];\n                        tmp2['value'] = tmp['roomid'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        isLoaded: true,\n                        rooms: strs,\n                        roomIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    getListStatus() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listStatus\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['statusId'];\n                        tmp2['text'] = tmp['description'];\n                        tmp2['value'] = tmp['statusId'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        status: strs,\n                        statusIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    setListRoom() {\n        let Name = \"1\";\n        let Phone = \"2\";\n        let Company = \"3\";\n        let Company_Address = \"4\";\n        let isICMCenter = \"5\";\n        let RangeIncome = \"6\";\n        let Product = \"7\";\n        let encoded = \"Name=\" + Name + \"&Phone=\" + Phone + \"&Company=\" + Company + \"&Company_Address=\" + Company_Address + \"&isICMCenter=\" + isICMCenter + \"&RangeIncome=\" + RangeIncome + \"&Product=\" + Product;\n\n        fetch('https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec', {\n            method: 'POST',\n            body: encoded,\n            // body: JSON.stringify({\n            //     title: 'New title added',\n            //     body: 'New body added. Hello body.'\n            // }),\n            headers: {\n                \"Content-type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(response => {\n            console.log(response.json());\n        }).then(json => {\n            console.log(json);\n            // this.setState({\n            //     user:json\n            // });\n        });\n    }\n\n    renderSearchForm() {\n        let listRoomIds = this.state.roomIds;\n        let listStatusIds = this.state.statusIds;\n\n        return (\n            <div>\n                <Input fluid icon='search' action='Search' placeholder='Search...'/>\n                <br/>\n                <Form.Group widths='equal'>\n                    <Form.Select\n                        fluid\n                        label='RoomID'\n                        onChange={this.handleChangeRoomIDSelect}\n                        options={listRoomIds}\n                        placeholder='RoomIDs'\n                    />\n                    <Form.Select\n                        fluid\n                        label='Status'\n                        options={listStatusIds}\n                        onChange={this.handleChangeStatusIDSelect}\n                        placeholder='Status'\n                    />\n                </Form.Group>\n            </div>\n        );\n    }\n\n    renderListRooms() {\n        return (\n            <div className=\"col-3 col-12-mobile\">\n                <article className=\"item\">\n                    <div className=\"image fitfull\">\n                        <a className=\"image fit\"><img src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>\n                    </div>\n                    <header>\n                        <h3>Room 101</h3>\n                    </header>\n                </article>\n            </div>\n        );\n    }\n\n    handleChangeRoomIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            roomidselected: val['value']\n        });\n    }\n\n    handleChangeStatusIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            statusSelected: val['value']\n        });\n    }\n\n    componentDidMount() {\n        this.getListRoomDetails();\n        this.getListStatus();\n    }\n\n    render() {\n        if (this.state.isLoaded == false) {\n            return (<Segment>\n                <Loader active/>\n\n                <Image src='https://react.semantic-ui.com/images/wireframe/short-paragraph.png'/>\n            </Segment>);\n        }\n        // console.log(this.state.statusIds);\n        // console.log(this.state.statusSelected);\n        return (\n            <div>\n                <Form>\n                    {this.renderSearchForm()}\n                    {this.renderListRooms()}\n                </Form>\n                <br/><br/>\n                {/*<Card.Group>*/}\n                {/*    <Card>*/}\n                {/*        <Card.Content>*/}\n                {/*            <Image*/}\n                {/*                floated='right'*/}\n                {/*                size='mini'*/}\n                {/*                src='images/hotelico.jpeg'*/}\n                {/*            />*/}\n                {/*            <Card.Header>Room 101</Card.Header>*/}\n                {/*            <Card.Meta>Tang 1</Card.Meta>*/}\n                {/*            <Card.Description>*/}\n                {/*                Steve wants to add you to the group <strong>best friends</strong>*/}\n                {/*            </Card.Description>*/}\n                {/*        </Card.Content>*/}\n                {/*        <Card.Content extra>*/}\n                {/*            <div className='ui one buttons'>*/}\n                {/*                <Button basic color='green'>*/}\n                {/*                    CheckIn*/}\n                {/*                </Button>*/}\n\n                {/*            </div>*/}\n                {/*        </Card.Content>*/}\n                {/*    </Card>*/}\n\n                {/*</Card.Group>*/}\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {IndexPage} from './containers/IndexPage';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css'\n\n\nclass ThaiBinhHotel extends React.Component{\n    render(){\n        return <IndexPage/>;\n    }\n}\n\nReactDOM.render(<ThaiBinhHotel />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}