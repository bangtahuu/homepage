{"version":3,"sources":["components/RoomDetail.js","components/ListRoomRows.js","components/RoomDetailModel.js","containers/IndexPage.js","serviceWorker.js","index.js"],"names":["RoomDetail","props","state","open","redirectLink","bind","link","window","location","href","Modal","closeIcon","trigger","className","style","boxShadow","src","alt","Header","Content","image","scrolling","Image","size","wrapped","Description","Actions","Button","primary","onClick","this","React","Component","ListRoomRows","renderRow","refreshPage","roomInfo","Array","prototype","map","call","room","key","roomid","renderDetail","status","backgroundColor","console","log","defaultProps","roomsInfo","IndexPage","isLoaded","Name","Company","Phone","Product","Company_Address","RangeIncome","isICMCenter","rooms","roomIds","statusIds","roomidselected","statusSelected","forEach","method","fetch","then","res","json","result","strs","ids","tmp","tmp2","i","length","JSON","parse","push","setState","error","body","headers","response","listRoomIds","listStatusIds","Input","fluid","icon","action","placeholder","Form","Group","widths","Select","label","onChange","handleChangeRoomIDSelect","options","handleChangeStatusIDSelect","event","val","getListRoomDetails","getListStatus","Segment","Dimmer","active","inverted","Loader","renderSearchForm","renderListRooms","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ThaiBinhHotel","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d7f79c7e.chunk.js","sourcesContent":["import _ from 'lodash'\nimport React from 'react'\nimport { Button, Header, Icon, Image, Modal } from 'semantic-ui-react'\nimport PropTypes from \"prop-types\";\n\nexport class RoomDetail extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false\n        };\n\n        this.redirectLink = this.redirectLink.bind(this);\n    }\n\n    redirectLink(){\n        let link =window.location.href;\n        window.location.href = link;\n    }\n\n    render(){\n        return (\n            <Modal closeIcon trigger={<a className=\"image fit\"><img style={{boxShadow: '10px 10px 5px #ccc'}} src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>}>\n                <Modal.Header>Profile Picture</Modal.Header>\n                <Modal.Content image scrolling>\n                    <Image size='medium' src='images/rom101.png' wrapped />\n\n                    <Modal.Description>\n                        <Header>Modal Header</Header>\n                        <p>\n                            This is an example of expanded content that will cause the modal's\n                            dimmer to scroll\n                        </p>\n                    </Modal.Description>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button primary onClick={this.redirectLink}>\n                        {/*<a href=\"http://localhost:3000/\" style={{color: 'white'}}>Proceed</a>*/}\n                        Proceed\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        );\n    }\n}\n\n\nRoomDetail.propTypes = {\n\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Image, Rail, Segment } from 'semantic-ui-react';\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react';\nimport { RoomDetail } from '../components/RoomDetail';\nimport { RoomDetailModel } from '../components/RoomDetailModel';\n\nexport class ListRoomRows extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          open: false\n        };\n        this.renderRow = this.renderRow.bind(this);\n        this.refreshPage = this.refreshPage.bind(this);\n    }\n\n    refreshPage(){\n\n    }\n\n    renderDetail(){\n        return <RoomDetail />;\n    }\n\n    renderRow() {\n        const {roomInfo} = this.props;\n        return Array.prototype.map.call(roomInfo, (room) => (\n            <div className=\"col-3 col-12-mobile\" key={room.roomid}>\n                <article className=\"item\">\n                    <div className=\"image fitfull\">\n                        {this.renderDetail()}\n                        {/*<a className=\"image fit\"><img style={{boxShadow: '10px 10px 5px #ccc'}} src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>*/}\n                    </div>\n                    <header>\n                        {room.status == 1 ? <h2 style={{backgroundColor: '#ffd633'}}>Room {room.roomid}</h2> : <h2 style={{backgroundColor: '#e1eaea'}}>Room {room.roomid}</h2>}\n                    </header>\n                </article>\n            </div>\n        ));\n    }\n\n    render() {\n        console.log(this.props.roomInfo);\n        return (\n            <div className=\"row\">\n                {this.renderRow()}\n            </div>\n\n        );\n    }\n}\n\nListRoomRows.defaultProps = {\n    roomsInfo: []\n}\n\nListRoomRows.propTypes = {\n    roomsInfo: PropTypes.array\n}\n\n","import React, { Component } from 'react'\nimport { Button, Header, Image, Modal } from 'semantic-ui-react'\n\nexport class RoomDetailModel extends Component {\n    state = { open: false }\n\n    show = (dimmer) => () => this.setState({ dimmer, open: true })\n    close = () => this.setState({ open: false })\n\n    render() {\n        const { open, dimmer } = this.state\n\n        return (\n            <div>\n                <Button onClick={this.show(true)}>Default</Button>\n                <Button onClick={this.show('inverted')}>Inverted</Button>\n                <Button onClick={this.show('blurring')}>Blurring</Button>\n                <a className=\"image fit\"><img onClick={this.show('blurring')} style={{boxShadow: '10px 10px 5px #ccc'}} src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>\n\n                <Modal dimmer={dimmer} open={open} onClose={this.close}>\n                    <Modal.Header>Select a Photo</Modal.Header>\n                    <Modal.Content image>\n                        <Image\n                            wrapped\n                            size='medium'\n                            src='https://react.semantic-ui.com/images/avatar/large/rachel.png'\n                        />\n                        <Modal.Description>\n                            <Header>Default Profile Image</Header>\n                            <p>\n                                We've found the following gravatar image associated with your\n                                e-mail address.\n                            </p>\n                            <p>Is it okay to use this photo?</p>\n                        </Modal.Description>\n                    </Modal.Content>\n                    <Modal.Actions>\n                        <Button color='black' onClick={this.close}>\n                            Nope\n                        </Button>\n                        <Button\n                            positive\n                            icon='checkmark'\n                            labelPosition='right'\n                            content=\"Yep, that's me\"\n                            onClick={this.close}\n                        />\n                    </Modal.Actions>\n                </Modal>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Form} from 'semantic-ui-react';\nimport {Button, Card, Image} from 'semantic-ui-react';\nimport {Input} from 'semantic-ui-react';\nimport {Loader, Segment} from 'semantic-ui-react'\nimport {ListRoomRows} from '../components/ListRoomRows'\nimport { Dimmer } from 'semantic-ui-react'\n\n\nexport class IndexPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            room: {\n                Name: '',\n                Company: '',\n                Phone: '',\n                Product: '',\n                Company_Address: '',\n                RangeIncome: '',\n                isICMCenter: '',\n            },\n            rooms: [],\n            roomIds: [],\n            status: [],\n            statusIds: [],\n            roomidselected: '',\n            statusSelected: ''\n        };\n\n        [\n            'getListRoomDetails',\n            'setListRoom',\n            'handleChangeRoomIDSelect',\n            'handleChangeStatusIDSelect',\n            'getListStatus',\n            'renderSearchForm',\n            'renderListRooms'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n\n    getListRoomDetails() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listRoomsDetail\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['roomid'];\n                        tmp2['text'] = tmp['roomDescription'];\n                        tmp2['value'] = tmp['roomid'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        isLoaded: true,\n                        rooms: strs,\n                        roomIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    getListStatus() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listStatus\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['statusId'];\n                        tmp2['text'] = tmp['description'];\n                        tmp2['value'] = tmp['statusId'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        status: strs,\n                        statusIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    setListRoom() {\n        let Name = \"1\";\n        let Phone = \"2\";\n        let Company = \"3\";\n        let Company_Address = \"4\";\n        let isICMCenter = \"5\";\n        let RangeIncome = \"6\";\n        let Product = \"7\";\n        let encoded = \"Name=\" + Name + \"&Phone=\" + Phone + \"&Company=\" + Company + \"&Company_Address=\" + Company_Address + \"&isICMCenter=\" + isICMCenter + \"&RangeIncome=\" + RangeIncome + \"&Product=\" + Product;\n\n        fetch('https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec', {\n            method: 'POST',\n            body: encoded,\n            // body: JSON.stringify({\n            //     title: 'New title added',\n            //     body: 'New body added. Hello body.'\n            // }),\n            headers: {\n                \"Content-type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(response => {\n            console.log(response.json());\n        }).then(json => {\n            console.log(json);\n            // this.setState({\n            //     user:json\n            // });\n        });\n    }\n\n    renderSearchForm() {\n        let listRoomIds = this.state.roomIds;\n        let listStatusIds = this.state.statusIds;\n\n        return (\n            <div>\n                <Input fluid icon='search' action='Search' placeholder='Search...'/>\n                <br/>\n                <Form.Group widths='equal'>\n                    <Form.Select\n                        fluid\n                        label='RoomID'\n                        onChange={this.handleChangeRoomIDSelect}\n                        options={listRoomIds}\n                        placeholder='RoomIDs'\n                    />\n                    <Form.Select\n                        fluid\n                        label='Status'\n                        options={listStatusIds}\n                        onChange={this.handleChangeStatusIDSelect}\n                        placeholder='Status'\n                    />\n                </Form.Group>\n            </div>\n        );\n    }\n\n    renderListRooms() {\n        return (\n            <ListRoomRows roomInfo={this.state.rooms}/>\n        );\n    }\n\n    handleChangeRoomIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            roomidselected: val['value']\n        });\n    }\n\n    handleChangeStatusIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            statusSelected: val['value']\n        });\n    }\n\n    componentDidMount() {\n        this.getListRoomDetails();\n        this.getListStatus();\n    }\n\n    render() {\n        if (this.state.isLoaded == false) {\n            return (<Segment>\n                        <Dimmer active inverted>\n                            <Loader size='large'>Loading</Loader>\n                        </Dimmer>\n                        <Image src='images/loader.png'/>\n                    </Segment>);\n        }\n        // console.log(this.state.statusIds);\n        // console.log(this.state.statusSelected);\n        return (\n            <div>\n                <Form>\n                    {this.renderSearchForm()}\n                    {this.renderListRooms()}\n                </Form>\n                <br/><br/>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {IndexPage} from './containers/IndexPage';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css'\n\n\nclass ThaiBinhHotel extends React.Component{\n    render(){\n        return <IndexPage/>;\n        // return <div>aaa</div>;\n    }\n}\n\nReactDOM.render(<ThaiBinhHotel />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}