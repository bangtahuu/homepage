{"version":3,"sources":["containers/ListRoomPage.js","serviceWorker.js","index.js"],"names":["options","key","text","value","ListRoomPage","props","state","isLoaded","room","Name","Company","Phone","Product","Company_Address","RangeIncome","isICMCenter","rooms","roomIds","roomidselected","forEach","method","bind","fetch","then","res","json","result","strs","ids","tmp","tmp2","i","length","JSON","parse","push","setState","error","body","headers","response","console","log","event","val","this","getListRoomDetails","Segment","Loader","active","Image","src","listRoomIds","Form","Input","fluid","icon","action","placeholder","Group","widths","Select","label","onChange","handleChangeRoomIDs","Card","Content","floated","size","Header","Meta","Description","extra","className","Button","basic","color","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ThaiBinhHotel","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.12b4d507.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n// import {Card,Button, Form, Row, Col, FormControl, FormCheck} from 'react-bootstrap';\nimport {Form} from 'semantic-ui-react';\nimport {Button, Card, Image} from 'semantic-ui-react';\nimport { Input } from 'semantic-ui-react';\nimport { Icon, Label } from 'semantic-ui-react';\nimport { Loader, Segment } from 'semantic-ui-react'\n\nconst options = [\n    {key: '0', text: 'Not Avaiable', value: '0'},\n    {key: '1', text: 'Avaiable', value: '1'},\n    {key: '2', text: 'Cleaning', value: '2'},\n]\n\nexport class ListRoomPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            room: {\n                Name: '',\n                Company: '',\n                Phone: '',\n                Product: '',\n                Company_Address: '',\n                RangeIncome: '',\n                isICMCenter: '',\n            },\n            rooms: [],\n            roomIds: [],\n            roomidselected: '',\n        };\n\n        [\n            'getListRoomDetails',\n            'setListRoom',\n            'handleChangeRoomIDs',\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n\n\n    getListRoomDetails() {\n        // fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listoption\")\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listRoomsDetail\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i =0;i< result.length;i++){\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2= {};\n                        tmp2['key'] = tmp['roomid'];\n                        tmp2['text'] = tmp['roomDescription'];\n                        tmp2['value'] = tmp['roomid'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        isLoaded: true,\n                        // rooms: result,\n                        rooms: strs,\n                        roomIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: true,\n                    });\n                }\n            )\n    }\n\n    setListRoom() {\n        let Name = \"1\";\n        let Phone = \"2\";\n        let Company = \"3\";\n        let Company_Address = \"4\";\n        let isICMCenter = \"5\";\n        let RangeIncome = \"6\";\n        let Product = \"7\";\n        let encoded = \"Name=\" + Name + \"&Phone=\" + Phone + \"&Company=\" + Company + \"&Company_Address=\" + Company_Address + \"&isICMCenter=\" + isICMCenter + \"&RangeIncome=\" + RangeIncome + \"&Product=\" + Product;\n\n        fetch('https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec', {\n            method: 'POST',\n            body: encoded,\n            // body: JSON.stringify({\n            //     title: 'New title added',\n            //     body: 'New body added. Hello body.'\n            // }),\n            headers: {\n                \"Content-type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(response => {\n            console.log(response.json());\n        }).then(json => {\n            console.log(json);\n            // this.setState({\n            //     user:json\n            // });\n        });\n    }\n\n    handleChangeRoomIDs (event, val = null) {\n        if(val == null)\n            return;\n        this.setState({\n            roomidselected: val['value']\n        });\n    }\n\n    componentDidMount() {\n        this.getListRoomDetails();\n    }\n\n    render() {\n        if(this.state.isLoaded == false) {\n            return (<Segment>\n                        <Loader active/>\n\n                        <Image src='https://react.semantic-ui.com/images/wireframe/short-paragraph.png'/>\n                    </Segment>);\n        }\n        // console.log(this.state.roomIds);\n        // console.log(this.state.rooms);\n        console.log(this.state.roomidselected);\n        const listRoomIds= this.state.roomIds;\n        return (\n            <div>\n                <Form>\n                    <Input fluid icon='search' action='Search' placeholder='Search...' />\n                    <br/>\n                    <Form.Group widths='equal'>\n                        <Form.Select\n                            fluid\n                            label='RoomID'\n                            onChange={this.handleChangeRoomIDs}\n                            options={listRoomIds}\n                            placeholder='IDs'\n                        />\n                        <Form.Select\n                            fluid\n                            label='Status'\n                            options={options}\n                            placeholder='Gender'\n                        />\n                    </Form.Group>\n\n                    {/*<Button*/}\n                    {/*    primary*/}\n                    {/*    attached='bottom'*/}\n                    {/*    onClick={this.getListRoom}>*/}\n                    {/*    Search*/}\n                    {/*</Button>*/}\n                </Form>\n                <br/><br/>\n                <Card.Group>\n                    <Card>\n                        <Card.Content>\n                            <Image\n                                floated='right'\n                                size='mini'\n                                src='images/hotelico.jpeg'\n                            />\n                            <Card.Header>Room 101</Card.Header>\n                            <Card.Meta>Tang 1</Card.Meta>\n                            <Card.Description>\n                                Steve wants to add you to the group <strong>best friends</strong>\n                            </Card.Description>\n                        </Card.Content>\n                        <Card.Content extra>\n                            <div className='ui one buttons'>\n                                <Button basic color='green'>\n                                    CheckIn\n                                </Button>\n\n                            </div>\n                        </Card.Content>\n                    </Card>\n\n                </Card.Group>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {ListRoomPage} from './containers/ListRoomPage';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css'\n\n\nclass ThaiBinhHotel extends React.Component{\n    render(){\n        return <ListRoomPage/>;\n    }\n}\n\nReactDOM.render(<ThaiBinhHotel />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}