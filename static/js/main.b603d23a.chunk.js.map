{"version":3,"sources":["components/ListOption.js","components/RoomDetail.js","components/ListRoomRows.js","components/SearchingTab.js","containers/IndexPage.js","serviceWorker.js","index.js"],"names":["formatNumber","num","toString","replace","ListOption","props","console","log","state","items","listoptionIds","slice","optionListSelected","length","option","description","optionid","price","quantity","total","totalOptions","forEach","method","bind","listOptionSlt","this","listOptionSltIds","map","item","push","listOptionIDsTmp","concat","listOptionIDsMerge","filter","pos","indexOf","setState","listoptionIdstmp","listoption","flagNew","i","parseInt","onChangeOption","pop","event","data","isNaN","value","toast","info","tmp","optionId","total_option","count","Segment","placeholder","textAlign","Grid","columns","relaxed","stackable","Column","Form","Label","Dropdown","options","selection","onChange","handleChangeDropdown","Input","disabled","type","max","min","handleChangeQuantity","Divider","horizontal","Statistic","size","Value","Button","content","icon","color","onClick","handleAddRow","Group","Table","striped","bordered","hover","style","width","label","handleRemoveRow","floated","key","Math","random","float","as","tag","hidden","React","Component","Moment","locale","momentLocalizer","RoomDetail","open","CheckinTimeSelected","roominfo","fromTime","Date","roomCurrentClass","moreOptionId","JSON","parse","roomDetailOpen","isSubmiting","roomId","roomid","id","checkinTime","roomClass","stringify","totalOptionPrice","error","UpdateCheckInRoom","status","stt","statusList","text","val","roomTypeOther","imgsrc","Modal","closeIcon","onClose","trigger","className","boxShadow","handleShowModal","src","alt","Header","Content","image","scrolling","height","Image","wrapped","Description","roomDescription","getStatusDes","onChangePickedTime","Select","fluid","handleChangeTypeIDSelect","ribbon","handleChangeOption","Actions","primary","checkinRoomSubmit","handleHideModal","ListRoomRows","room","roomsInfo","Array","prototype","call","renderDetail","backgroundColor","renderRow","defaultProps","IndexPage","isLoadedRooms","isLoadedParam","rooms","roomIds","statusIds","roomTypeOtherIds","roomidselected","statusSelected","fetch","then","res","json","result","strs","ids","tmp2","newstr","formatted_date","current_datetime","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","encoded","body","headers","response","a","msgerr","success","position","POSITION","TOP_RIGHT","handleClearSearching","getListRoomDetails","Dimmer","active","inverted","Loader","listRoomIds","listStatusIds","styleDisable","padded","attached","widths","handleChangeRoomIDSelect","handleChangeStatusIDSelect","getListStatus","getroomTypeOther","getlistoption","fontSize","renderSearchForm","renderListRooms","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ThaiBinhHotel","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b603d23a.chunk.js","sourcesContent":["import React from 'react'\nimport {Button, Form, Input, Dropdown, Divider, Grid, Label, Statistic} from 'semantic-ui-react'\nimport PropTypes from \"prop-types\";\nimport TableBT from 'react-bootstrap/Table';\nimport {Segment} from 'semantic-ui-react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../App.css';\n\nfunction formatNumber(num) {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}\n\nexport class ListOption extends React.Component {\n    constructor(props) {\n        console.log('constructor');\n        super(props);\n        this.state = {\n            items: this.props.listoptionIds.slice(0, this.props.optionListSelected.length),\n            option: {\n                description: '',\n                optionid: null,\n                price: 0,\n                quantity: 0,\n                total: 0\n            },\n            listoptionIds: [],\n            optionListSelected: [],\n            totalOptions: 0,\n        };\n        [\n            'handleChangeDropdown',\n            'handleChangeQuantity',\n            'handleAddRow',\n            'handleRemoveRow',\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    componentDidMount() {\n        console.log('componentDidMount');\n        let listOptionSlt = this.props.optionListSelected;\n        let listOptionSltIds = [];\n        listOptionSlt && listOptionSlt.map(item => {\n            listOptionSltIds.push(item[\"optionid\"])\n        })\n\n        var listOptionIDsTmp = listOptionSltIds.concat(this.props.listoptionIds);\n        var listOptionIDsMerge = listOptionIDsTmp.filter((item, pos) => listOptionIDsTmp.indexOf(item) === pos);\n\n        this.setState({\n            items: listOptionIDsMerge.slice(0, this.props.optionListSelected.length)\n        });\n\n\n        //get List option for select\n        var listoptionIdstmp = {};\n        var listoptionIds = [];\n\n        this.props.listoption.map(item => {\n            listoptionIdstmp = {}\n            listoptionIdstmp['key'] = item['optionId'];\n            listoptionIdstmp['text'] = item['description'];\n            listoptionIdstmp['value'] = item['optionId'];\n            listoptionIds.push(listoptionIdstmp);\n        });\n        this.setState({\n            listoptionIds: listoptionIds,\n        });\n\n        //Set value for State: optionListSelected\n        this.setState({\n            optionListSelected: this.props.optionListSelected\n        });\n\n    }\n\n\n    handleAddRow() {\n        console.log('handleAddRow');\n        const option = {...this.state.option};\n        let optionListSelected = this.state.optionListSelected;\n        let flagNew = true;\n        for (let i = 0; i < optionListSelected.length; i++) {\n            if (optionListSelected[i].optionid == option.optionid) {\n                optionListSelected[i].quantity = parseInt(option.quantity) + parseInt(optionListSelected[i].quantity);\n                optionListSelected[i].total = parseInt(optionListSelected[i].quantity) * parseInt(optionListSelected[i].price);\n                flagNew = false;\n                break;\n            }\n        }\n\n        if (flagNew) {\n            optionListSelected.push(option);\n        }\n        this.setState({\n            optionListSelected: optionListSelected\n        });\n\n        this.props.onChangeOption(optionListSelected);\n    }\n\n    handleRemoveRow() {\n        console.log('handleRemoveRow');\n        const optionListSelected = this.state.optionListSelected;\n        optionListSelected.pop();\n        this.setState({\n            optionListSelected: optionListSelected\n        });\n\n        this.props.onChangeOption(optionListSelected);\n    }\n\n    handleChangeQuantity(event, data) {\n        console.log('handleChangeQuantity');\n        if(!data){\n            return;\n        }\n        if (isNaN(data.value)) {\n            return\n        } else {\n            if (parseInt(data.value) < 0 || parseInt(data.value) > 100) {\n                toast.info('Số lượng phải từ 0 - 100');\n                return;\n            }\n        }\n        let option = {...this.state.option};\n        option['quantity'] = parseInt(data.value);\n        option['total'] = parseInt(data.value) * parseInt(option['price']);\n\n        this.setState({\n            option: option,\n        });\n    }\n\n    handleChangeDropdown(event, data) {\n        console.log('handleChangeDropdown');\n        const listoption = this.props.listoption;\n        let tmp = [];\n        for (let i = 0; i < listoption.length; i++) {\n            if (listoption[i].optionId == data.value) {\n                tmp = [];\n                tmp = listoption[i];\n                tmp['optionid'] = listoption[i].optionId;\n                tmp['quantity'] = 1;\n                tmp['total'] = tmp['price'];\n                break;\n            }\n        }\n        this.setState({\n            option: tmp,\n        });\n    }\n\n    render() {\n        console.log('render');\n        const items = this.state.optionListSelected;\n\n        // console.log(items);\n        // console.log(this.props.listoptionIds);\n        // console.log(this.props.listoption);\n        // console.log(this.props.optionListSelected);\n        // console.log(this.state.listoptionIds)\n        // console.log(this.state.optionListSelected);\n        // debugger;\n        var total_option = 0;\n        var count = 0;\n        return (\n            <div>\n                <div>\n                    <Segment placeholder textAlign='center'>\n                        <Grid columns={1} relaxed='very' stackable>\n                            <Grid.Column>\n                                <Form>\n                                    <Label>Loại SP:</Label>\n                                    <Dropdown\n                                        options={this.state.listoptionIds}\n                                        value={this.state.option.optionid}\n                                        placeholder='Choose an option'\n                                        selection\n                                        onChange={this.handleChangeDropdown}\n                                    />\n                                    <br/>\n                                    <br/>\n                                    <Label>Số lượng:</Label>\n                                    <Input\n                                        disabled={this.state.option.optionid == 0 || this.state.option.optionid == null}\n                                        placeholder='...'\n                                        type='number'\n                                        max='100'\n                                        min='0'\n                                        value={this.state.option.quantity}\n                                        onChange={this.handleChangeQuantity}\n                                    />\n                                    <br/>\n                                    <br/>\n                                    <Label> Số tiền/1\n                                        sp: <b>{formatNumber(this.state.option.price)} VND</b>\n                                    </Label>\n                                    <br/>\n                                    <br/>\n                                    {/*<Label style={{display: this.state.errMessQuantity}} basic color='red'*/}\n                                    {/*       pointing='left'>*/}\n                                    {/*    Số lượng từ phải từ 0 - 100*/}\n                                    {/*</Label>*/}\n                                </Form>\n\n                                <Divider horizontal>Total</Divider>\n\n                                <Statistic horizontal size='tiny'>\n                                    <Statistic.Value>{formatNumber(this.state.option.total)}</Statistic.Value>\n                                    <Statistic.Label>vnd</Statistic.Label>\n                                </Statistic>\n                                <Button content='Add' icon='plus square' size='big' color='grey'\n                                        onClick={this.handleAddRow}\n                                        disabled={this.state.option.optionid == 0 || this.state.option.optionid == null || this.state.option.quantity == 0}/>\n                            </Grid.Column>\n                        </Grid>\n                    </Segment>\n                </div>\n                <Button.Group>\n                </Button.Group>\n                {this.state.optionListSelected ? <TableBT size=\"sm\" striped bordered hover style={{width: '100%'}}>\n                    <thead>\n                    <tr>\n                        <th></th>\n                        <th>\n                            <Button\n                                label='Remove'\n                                disabled={this.state.optionListSelected.length === 0}\n                                icon='minus square'\n                                onClick={this.handleRemoveRow}\n                                floated='right'\n                            />\n                        </th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.optionListSelected.map((item) => (\n                        <tr key={Math.random()}>\n                            {(item) && (\n                                [<td key={Math.random()}>\n                                    <b>{item.quantity} - {item.description}</b>\n                                </td>,\n                                    <td key={Math.random()}>\n                                        <b style={{float: 'right'}}><Label as='a' color='olive' tag\n                                                                           size='large'>{formatNumber(item.total)} VND</Label></b>\n                                        <p hidden>{count = count + 1} {total_option = total_option + item.total}</p>\n                                    </td>]\n                            )\n                            }\n                        </tr>\n                    ))}\n                    </tbody>\n                    <tfoot>\n                    <tr>\n                        <td></td>\n                        <td>\n                            <b style={{float: 'right'}}><Label as='a' color='yellow' tag\n                                                               size='large'>{formatNumber(total_option)} VND</Label></b>\n                        </td>\n                    </tr>\n                    </tfoot>\n                </TableBT> : <div></div>\n                }\n            </div>\n        )\n    }\n}\n\nListOption.propTypes = {\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array,\n    optionListSelected: PropTypes.array,\n    onChangeOption: PropTypes.func,\n}","import React from 'react'\nimport {Button, Form, Header, Image, Label, Modal} from 'semantic-ui-react'\nimport PropTypes from \"prop-types\";\nimport Moment from 'moment'\nimport momentLocalizer from 'react-widgets-moment';\nimport DateTimePicker from 'react-widgets/lib/DateTimePicker';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport {ListOption} from '../components/ListOption';\nimport 'semantic-ui-css/semantic.min.css';\nimport {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../App.css';\n\nMoment.locale('vn')\nmomentLocalizer()\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport class RoomDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            CheckinTimeSelected: (this.props.roominfo.fromTime ? new Date(this.props.roominfo.fromTime.replace(/[A-Za-z]/g,' ')) : new Date()),\n            roomCurrentClass: (this.props.roominfo.roomCurrentClass ? this.props.roominfo.roomCurrentClass : ''),\n            optionListSelected: (this.props.roominfo.moreOptionId ? JSON.parse(this.props.roominfo.moreOptionId) : ''),\n            roomDetailOpen: false,\n            isSubmiting: false\n        };\n\n        [\n            'checkinRoomSubmit',\n            'getStatusDes',\n            'onChangePickedTime',\n            'handleChangeTypeIDSelect',\n            'handleChangeOption',\n            'handleShowModal',\n            'handleHideModal',\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    async checkinRoomSubmit() {\n        // window.location.reload(true);\n        await this.setState({\n            isSubmiting: true\n        });\n        let action = 'checkin';\n        let roomId = this.props.roominfo.roomid;\n        let id = this.props.roominfo.id;\n        let checkinTime = this.state.CheckinTimeSelected;\n        let roomClass = this.state.roomCurrentClass;\n        let options = JSON.stringify(this.state.optionListSelected);\n\n        let totalOptionPrice = 0;\n        for (let i = 0; i < this.state.optionListSelected.length; i++) {\n            totalOptionPrice = totalOptionPrice + this.state.optionListSelected[i].total;\n        }\n\n        if (!checkinTime) {\n            toast.error('Bạn chưa chọn giờ vào!');\n            return;\n        }\n        if (!roomClass) {\n            toast.error('Bạn chưa chọn loại phòng!');\n            return;\n        }\n\n        await this.props.UpdateCheckInRoom(id, checkinTime, roomClass, options, totalOptionPrice, roomId);\n        // await sleep(5000);\n        await this.setState({\n            roomDetailOpen: false,\n            isSubmiting: false\n        });\n    }\n\n    getStatusDes(status = '') {\n        let stt = this.props.statusList;\n        for (var i = 0; i < stt.length; i++) {\n            if (stt[i].key == status) {\n                return stt[i].text;\n            }\n        }\n    }\n\n    onChangePickedTime(val) {\n        this.setState({\n            CheckinTimeSelected: val\n        });\n    }\n\n    handleChangeTypeIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            roomCurrentClass: val['value']\n        });\n    }\n\n    handleChangeOption(data = []) {\n        console.log(JSON.stringify(data))\n        this.setState({\n            optionListSelected: data\n        });\n    }\n\n    handleShowModal() {\n        this.setState({\n            roomDetailOpen: true\n        });\n    }\n\n    handleHideModal() {\n        this.setState({\n            roomDetailOpen: false\n        });\n    }\n\n    // componentWillReceiveProps(nextProps) {\n    //     console.log(\"componentWillReceiveProps\");\n    //     // You don't have to do this check first, but it can help prevent an unneeded render\n    //     // if (nextProps.roominfo !== this.state.startTime) {\n    //         this.setState({\n    //             CheckinTimeSelected: (nextProps.roominfo.fromTime ? new Date(nextProps.roominfo.fromTime) : new Date()),\n    //             roomCurrentClass: (nextProps.roominfo.roomCurrentClass ? nextProps.roominfo.roomCurrentClass : ''),\n    //             optionListSelected: (nextProps.roominfo.moreOptionId ? JSON.parse(nextProps.roominfo.moreOptionId) : ''),\n    //         });\n    //     // CheckinTimeSelected: (this.props.roominfo.fromTime ? new Date(this.props.roominfo.fromTime) : new Date()),\n    //     //     roomCurrentClass: (this.props.roominfo.roomCurrentClass ? this.props.roominfo.roomCurrentClass : ''),\n    //     //     optionListSelected: (this.props.roominfo.moreOptionId ? JSON.parse(this.props.roominfo.moreOptionId) : ''),\n    //     // }\n    // }\n\n    render() {\n        const {roominfo, roomTypeOther} = this.props;\n        let imgsrc = roominfo.roomid ? 'images/room' + roominfo.roomid + '.png' : 'images/room101.png';\n        console.log(this.state.CheckinTimeSelected);\n        console.log(this.props.roominfo);\n\n        return (\n            <Modal style={{width: '100%'}} open={this.state.roomDetailOpen} closeIcon\n                   onClose={() => {this.setState({roomDetailOpen: false})}}\n                   trigger={<a className=\"image fit\"><img style={{boxShadow: '10px 10px 5px #ccc'}}\n                                                          onClick={this.handleShowModal}\n                                                          src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>}>\n                <Modal.Header>Room Detail</Modal.Header>\n                <Modal.Content image scrolling style={{height: '450%'}}>\n                    <Image size='medium' src={imgsrc} wrapped/>\n                    <Modal.Description style={{width: '100%'}}>\n                        <Header>{roominfo.roomDescription}</Header>\n                        <b>\n                            Status: {this.getStatusDes(roominfo.status)}\n                        </b>\n                        <hr/>\n                        <label>\n                            <b>Checkin:</b>\n                        </label>\n                        <div>\n                            <DateTimePicker value={this.state.CheckinTimeSelected}\n                                            onChange={this.onChangePickedTime}/>\n                        </div>\n                        <hr/>\n                        <div>\n                            <label>\n                                <b>Room Type:</b>\n                            </label>\n                            <Form.Select\n                                fluid\n                                icon=''\n                                // label='Room Type:'\n                                value={this.state.roomCurrentClass}\n                                options={roomTypeOther}\n                                onChange={this.handleChangeTypeIDSelect}\n                                placeholder='Type'\n                            />\n                        </div>\n                        <hr/>\n                        <Label as='a' color='teal' ribbon>\n                            Thêm Sản Phẩm:\n                        </Label>\n                        <ListOption listoptionIds={this.props.listoptionIds}\n                                    listoption={this.props.listoption}\n                                    onChangeOption={this.handleChangeOption}\n                                    optionListSelected={this.state.optionListSelected ? this.state.optionListSelected : []}/>\n                    </Modal.Description>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button primary onClick={this.checkinRoomSubmit} disabled={this.state.isSubmiting}>\n                        CheckIn\n                    </Button>\n                    <Button primary onClick={this.handleHideModal} disabled={this.state.isSubmiting}>\n                        Close\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        );\n    }\n}\n\n\nRoomDetail.propTypes = {\n    roominfo: PropTypes.object,\n    statusList: PropTypes.array,\n    roomTypeOther: PropTypes.array,\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array,\n    UpdateCheckInRoom: PropTypes.func\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { RoomDetail } from '../components/RoomDetail';\nimport 'semantic-ui-css/semantic.min.css';\n\nexport class ListRoomRows extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          open: false\n        };\n\n        [\n            'renderRow',\n            'refreshPage'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    refreshPage(){\n\n    }\n\n    renderDetail(room = []){\n        return <RoomDetail roominfo={room}\n                           statusList={this.props.statusList}\n                           roomTypeOther={this.props.roomTypeOther}\n                           listoptionIds={this.props.listoptionIds}\n                           listoption={this.props.listoption}\n                           UpdateCheckInRoom={this.props.UpdateCheckInRoom}/>;\n    }\n\n    renderRow() {\n        const {roomsInfo} = this.props;\n        return Array.prototype.map.call(roomsInfo, (room) => (\n            <div className=\"col-3 col-12-mobile\" key={room.roomid}>\n                <article className=\"item\">\n                    <div className=\"image fitfull\">\n                        {this.renderDetail(room)}\n                        {/*<a className=\"image fit\"><img style={{boxShadow: '10px 10px 5px #ccc'}} src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>*/}\n                    </div>\n                    <header>\n                        {room.status == 1 ? <h2 style={{backgroundColor: '#e1eaea'}}>Room {room.roomid}</h2> : <h2 style={{backgroundColor: '#ffd633'}}>Room {room.roomid}</h2>}\n                    </header>\n                </article>\n            </div>\n        ));\n    }\n\n    render() {\n        // console.log(this.props.roomInfo);\n        return (\n            <div className=\"row\">\n                {this.renderRow()}\n            </div>\n\n        );\n    }\n}\n\nListRoomRows.defaultProps = {\n    roomsInfo: []\n}\n\nListRoomRows.propTypes = {\n    roomsInfo: PropTypes.array,\n    statusList: PropTypes.array,\n    roomTypeOther: PropTypes.array,\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array,\n    UpdateCheckInRoom: PropTypes.func,\n}\n\n","import PropTypes from 'prop-types'\nimport _ from 'lodash'\n// import faker from 'faker'\nimport React, {Component} from 'react'\nimport {Search, Grid, Header, Segment, Label} from 'semantic-ui-react'\n\n// const faker = this.props.listRoomId;\n\n// const source = _.times(5, () => ({\n//     // title: faker.company.companyName(),\n//     // description: faker.company.catchPhrase(),\n//     // image: faker.internet.avatar(),\n//     // price: faker.finance.amount(0, 100, 2, '$'),\n//     title: 'Bangth',\n//     description: \"test\",\n//     image: \"test img\",\n// }))\n\nconst title = [{\"title\": \"bangth\"}, {\"title\": \"bangth2\"}, {\"title\": \"bangth2\"}];\nconst resultRenderer = (<Label content={title}/>);\n\nexport class SearchingTab extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            results: [],\n            value: '',\n            source: this.props.listRoomId,\n        };\n    }\n\n    handleResultSelect = (e, {result}) => this.setState({value: result.key})\n\n    handleSearchChange = (e, {value}) => {\n        this.setState({isLoading: true, value})\n\n        setTimeout(() => {\n            if (this.state.value.length < 1) return this.setState({\n                isLoading: false,\n                results: [],\n                value: '',\n                source: this.props.listRoomId\n            })\n\n            const re = new RegExp(_.escapeRegExp(this.state.value), 'i')\n            const isMatch = (result) => re.test(result.key)\n\n            this.setState({\n                isLoading: false,\n                results: _.filter(this.state.source, isMatch),\n            })\n        }, 300)\n    }\n\n    componentDidMount() {\n        console.log(this.props.listRoomId);\n    }\n\n    render() {\n        const {isLoading, value, results} = this.state\n\n        return (\n            <div style={{width: '100%'}}>\n                <Search\n                    fluid\n                    icon='search'\n                    aligned='right'\n                    loading={isLoading}\n                    onResultSelect={this.handleResultSelect}\n                    onSearchChange={_.debounce(this.handleSearchChange, 500, {\n                        leading: true,\n                    })}\n                    results={results}\n                    value={value}\n                />\n\n                {/*<Grid.Column width={10}>*/}\n                {/*    <Segment>*/}\n                {/*        <Header>State</Header>*/}\n                {/*        <pre style={{overflowX: 'auto'}}>*/}\n                {/*          {JSON.stringify(this.state, null, 2)}*/}\n                {/*        </pre>*/}\n                {/*        <Header>Options</Header>*/}\n                {/*        <pre style={{overflowX: 'auto'}}>*/}\n                {/*          {JSON.stringify(this.state.source, null, 2)}*/}\n                {/*        </pre>*/}\n                {/*    </Segment>*/}\n                {/*</Grid.Column>*/}\n            </div>\n        )\n    }\n}\n\nSearchingTab.propTypes = {\n    listRoomId: PropTypes.array,\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Form, Input, Image, Loader, Segment, Dimmer, Label} from 'semantic-ui-react';\nimport {ListRoomRows} from '../components/ListRoomRows';\nimport {SearchingTab} from '../components/SearchingTab';\nimport 'semantic-ui-css/semantic.min.css';\nimport {toast, ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../App.css';\n\nexport class IndexPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoadedRooms: false,\n            isLoadedParam: false,\n            roomDetailOpen: false,\n            rooms: [],\n            roomIds: [],\n            status: [],\n            statusIds: [],\n            roomTypeOther: [],\n            roomTypeOtherIds: [],\n            listoption: [],\n            listoptionIds: [],\n            roomidselected: '',\n            statusSelected: ''\n        };\n\n        [\n            'getListRoomDetails',\n            'UpdateCheckInRoom',\n            'handleChangeRoomIDSelect',\n            'handleChangeStatusIDSelect',\n            'getListStatus',\n            'renderSearchForm',\n            'renderListRooms',\n            'getroomTypeOther',\n            'getlistoption',\n            'handleClearSearching',\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    async getListRoomDetails(filter) {\n        console.log(\"getListRoomDetails\");\n        console.log(filter);\n        this.setState({\n            isLoadedRooms: false,\n        });\n        await fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listRoomsDetail\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['roomid'];\n                        tmp2['text'] = tmp['roomDescription'];\n                        tmp2['value'] = tmp['roomid'];\n                        ids.push(tmp2);\n                    }\n                    // debugger;\n                    if (filter) {\n                        let newstr = strs.filter(function (item) {\n                            return item[filter.id] == filter.value;\n                        });\n                        this.setState({\n                            isLoadedRooms: true,\n                            rooms: newstr,\n                            roomIds: ids\n                        });\n                    } else {\n                        this.setState({\n                            isLoadedRooms: true,\n                            rooms: strs,\n                            roomIds: ids\n                        });\n                    }\n                }, (error) => {\n                    this.setState({\n                        isLoadedRooms: false,\n                    });\n                }\n            )\n    }\n\n    getListStatus() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listStatus\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['statusId'];\n                        tmp2['text'] = tmp['description'];\n                        tmp2['value'] = tmp['statusId'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        isLoadedParam: true,\n                        status: strs,\n                        statusIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoadedParam: false,\n                    });\n                }\n            )\n    }\n\n    getlistoption() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listoption\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        ids.push(tmp['optionId']);\n                    }\n                    this.setState({\n                        isLoadedParam: true,\n                        listoption: strs,\n                        listoptionIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoadedParam: false,\n                    });\n                }\n            )\n    }\n\n    getroomTypeOther() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=PricebyOther\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['roomType'];\n                        tmp2['text'] = tmp['description'];\n                        tmp2['value'] = tmp['roomType'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        isLoadedParam: true,\n                        roomTypeOther: strs,\n                        roomTypeOtherIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoadedParam: false,\n                    });\n                }\n            )\n    }\n\n    async UpdateCheckInRoom(id, checkinTime, roomClass, options, totalOptionPrice, roomId) {\n        let current_datetime = checkinTime;\n        let formatted_date = current_datetime.getFullYear() + \"-\" + (current_datetime.getMonth() + 1) + \"-\" + current_datetime.getDate() + \" \" + current_datetime.getHours() + \":\" + current_datetime.getMinutes() + \":\" + current_datetime.getSeconds()\n        // debugger;\n        let encoded = \"checkinTime=\" + formatted_date +\n            \"&roomClass=\" + roomClass +\n            \"&options=\" + options +\n            \"&totalOptionPrice=\" + totalOptionPrice;\n\n        await fetch('https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=checkin&id=' + id, {\n            method: 'POST',\n            body: encoded,\n            headers: {\n                \"Content-type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(async function (response) {\n            let msgerr = '';\n            let isSuccess = false;\n            await response.json().then(function (data) {\n                console.log(data);\n                data['result'] == 'error' ? msgerr = JSON.stringify(data[\"error\"][\"message\"]) : isSuccess = true;\n            });\n\n            let stt = response.status;\n            if (stt == 200) {\n                if (!msgerr) {\n                    toast.success(\"Đặt phòng \" + roomId + \" thành công!\", {position: toast.POSITION.TOP_RIGHT});\n                } else {\n                    toast.error(\"Error:\" + JSON.stringify(msgerr));\n                }\n            } else {\n                toast.error(\"Something is wrong, please check log for detail!\");\n            }\n\n        }).then(() => {\n            this.handleClearSearching();\n        })\n    }\n\n    handleClearSearching() {\n        this.setState({\n            roomidselected: '',\n            statusSelected: '',\n        });\n        this.getListRoomDetails();\n    }\n\n    handleChangeRoomIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            roomidselected: val['value'],\n            statusSelected: ''\n        }, () => {\n            let filter = {'id': 'roomid', 'value': val['value']};\n            this.getListRoomDetails(filter);\n        });\n    }\n\n    handleChangeStatusIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            statusSelected: val['value'],\n            roomidselected: ''\n        }, () => {\n            let filter = {'id': 'status', 'value': val['value']};\n            this.getListRoomDetails(filter);\n        });\n    }\n\n    renderSearchForm() {\n        if (this.state.isLoadedParam == false) {\n            return (<Segment>\n                <Dimmer active inverted>\n                    <Loader size='large'>Loading</Loader>\n                </Dimmer>\n                <Image src='images/loader.png'/>\n            </Segment>);\n        }\n\n        let listRoomIds = this.state.roomIds;\n        let listStatusIds = this.state.statusIds;\n        let styleDisable = {'pointerEvents': ''};\n        // debugger;\n        if (!this.state.isLoadedRooms || !this.state.isLoadedParam) {\n            styleDisable = {'pointerEvents': 'none'};\n        }\n        var newlistRoomIds = '';\n        if (listRoomIds.length > 0){\n            listRoomIds.map((item) => {\n                let tmp = {\n                    title: item.key,\n                    description: item.text\n                }\n                item['title'] = item.key;\n                item['description'] = item.text;\n            });\n        }\n        return (\n            <Segment padded style={styleDisable}>\n                {/*{listRoomIds.length > 0 && <SearchingTab listRoomId={listRoomIds}/>}*/}\n                {/*<Input fluid icon='search plus' action='Search' placeholder='Search...'/>*/}\n                <Label attached='top left' onClick={this.handleClearSearching}>Refresh</Label>\n                <br/>\n                <Form.Group widths='equal'>\n                    <Form.Select\n                        fluid\n                        icon=''\n                        label='Lọc theo Phòng'\n                        value={this.state.roomidselected}\n                        onChange={this.handleChangeRoomIDSelect}\n                        options={listRoomIds}\n                        placeholder='RoomIDs'\n                    />\n                    <Form.Select\n                        fluid\n                        icon=''\n                        label='Lọc theo trạng thái'\n                        value={this.state.statusSelected}\n                        options={listStatusIds}\n                        onChange={this.handleChangeStatusIDSelect}\n                        placeholder='Status'\n                    />\n                </Form.Group>\n            </Segment>\n        );\n    }\n\n    renderListRooms() {\n        const {rooms, statusIds, roomTypeOtherIds, listoptionIds, listoption} = {...this.state};\n\n        if (this.state.isLoadedRooms == false) {\n            return (<Segment>\n                <Dimmer active inverted>\n                    <Loader size='large'>Loading</Loader>\n                </Dimmer>\n                <Image src='images/loader.png'/>\n            </Segment>);\n        }\n\n        return (\n            <Segment padded>\n                <Label attached='top'>Room List</Label>\n                <ListRoomRows roomsInfo={rooms}\n                              statusList={statusIds}\n                              roomTypeOther={roomTypeOtherIds}\n                              listoptionIds={listoptionIds}\n                              listoption={listoption}\n                              UpdateCheckInRoom={this.UpdateCheckInRoom}\n                />\n            </Segment>\n        );\n    }\n\n    componentDidMount() {\n        this.getListRoomDetails();\n        this.getListStatus();\n        this.getroomTypeOther();\n        this.getlistoption();\n    }\n\n    render() {\n        // console.log(this.state.statusIds);\n        // console.log(this.state.statusSelected);\n        return (\n            <div>\n                <ToastContainer style={{fontSize: '20px', textAlign: 'center'}}/>\n                <Form>\n                    {this.renderSearchForm()}\n                    {this.renderListRooms()}\n                </Form>\n                <br/><br/>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {IndexPage} from './containers/IndexPage';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css'\n\nclass ThaiBinhHotel extends React.Component{\n    render(){\n        return <IndexPage/>;\n        // return <div>aaa</div>;\n    }\n}\n\nReactDOM.render(<ThaiBinhHotel />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}