{"version":3,"sources":["components/ListOption.js","components/RoomDetail.js","components/ListRoomRows.js","components/RoomDetailModel.js","containers/IndexPage.js","serviceWorker.js","index.js"],"names":["ListOption","props","handleAdd","setState","prevState","items","listoption","slice","length","handleRemove","state","this","optionListSelected","map","item","console","log","listoptionIds","Button","Group","disabled","icon","onClick","Table","Header","Row","HeaderCell","Body","key","optionId","Cell","Dropdown","onChange","handleChange","options","placeholder","selection","Input","type","price","warning","Footer","React","Component","Moment","locale","momentLocalizer","RoomDetail","open","CheckinTimeSelected","roominfo","fromTime","Date","roomCurrentClass","moreOptionId","JSON","parse","forEach","method","bind","link","window","location","href","status","stt","statusList","i","text","val","event","roomTypeOther","imgsrc","roomid","Modal","style","width","closeIcon","trigger","className","boxShadow","src","alt","Content","image","height","Image","size","wrapped","Description","roomDescription","getStatusDes","value","onChangePickedTime","Form","Select","fluid","label","handleChangeTypeIDSelect","Actions","primary","redirectLink","ListRoomRows","room","roomsInfo","Array","prototype","call","renderDetail","backgroundColor","renderRow","defaultProps","IndexPage","isLoaded","rooms","roomIds","statusIds","roomTypeOtherIds","roomidselected","statusSelected","fetch","then","res","json","result","strs","ids","tmp","tmp2","push","error","body","headers","response","listRoomIds","listStatusIds","action","widths","handleChangeRoomIDSelect","handleChangeStatusIDSelect","getListRoomDetails","getListStatus","getroomTypeOther","getlistoption","Segment","Dimmer","active","inverted","Loader","renderSearchForm","renderListRooms","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ThaiBinhHotel","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.165ad65e.chunk.js","sourcesContent":["import _ from 'lodash'\nimport React from 'react'\nimport {Button, Form, Image, Input, List, Transition, Dropdown} from 'semantic-ui-react'\nimport {Icon} from 'semantic-ui-react'\nimport PropTypes from \"prop-types\";\nimport {Table} from 'semantic-ui-react';\n\nlet users = [];\n\nexport class ListOption extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // items: users.slice(0, 0)\n            items: this.props.listoption.slice(0, 0)\n        };\n    }\n\n    componentDidMount() {\n        this.props.optionListSelected.map(item => {\n            console.log(item)\n        });\n    }\n\n    handleAdd = () =>\n        this.setState((prevState) => ({\n            items: this.props.listoption.slice(0, prevState.items.length + 1),\n        }))\n\n    handleRemove = () =>\n        this.setState((prevState) => ({items: prevState.items.slice(0, -1)}))\n\n    render() {\n        const {items} = this.state;\n        const {listoptionIds} = this.props;\n        // console.log(this.props.listoptionIds);\n        console.log(this.props.listoption);\n        // console.log(this.state.items);\n        console.log(this.props.optionListSelected);\n        return (\n            <div>\n                <Button.Group>\n                    <Button\n                        disabled={items.length === 0}\n                        icon='minus square'\n                        onClick={this.handleRemove}\n                    />\n\n                    <Button\n                        disabled={items.length === this.props.listoption.length}\n                        icon='plus square'\n                        onClick={this.handleAdd}\n                    />\n                </Button.Group>\n                <Table >\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell></Table.HeaderCell>\n                            {/*<Table.HeaderCell>ID</Table.HeaderCell>*/}\n                            <Table.HeaderCell>Description</Table.HeaderCell>\n                            <Table.HeaderCell>Quantity</Table.HeaderCell>\n                            <Table.HeaderCell>Price/1prd</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n\n                    <Table.Body>\n                        {items.map((item) => (\n                            <Table.Row key={item.optionId}>\n                                <Table.Cell>\n                                    <Button\n                                        disabled={items.length === 0}\n                                        icon='minus square'\n                                        onClick={this.handleRemove}\n                                    />\n                                </Table.Cell>\n                                {/*<Table.Cell>{item.optionId}</Table.Cell>*/}\n                                <Table.Cell>\n                                    {/*<Form.Select*/}\n                                    {/*    fluid*/}\n                                    {/*    icon=''*/}\n                                    {/*    options={listoptionIds}*/}\n                                    {/*    onChange={this.handleChangeTypeIDSelect}*/}\n                                    {/*    placeholder='Options'*/}\n                                    {/*/>*/}\n                                    <Dropdown\n                                        onChange={this.handleChange}\n                                        options={listoptionIds}\n                                        placeholder='Choose an option'\n                                        selection\n                                    />\n                                </Table.Cell>\n                                <Table.Cell><Input type=\"number\"/></Table.Cell>\n                                <Table.Cell>{item.price}</Table.Cell>\n                            </Table.Row>\n                        ))}\n                        {this.props.listoption.map((item) => (\n                            <Table.Row warning key={item.optionId}>\n                                <Table.Cell></Table.Cell>\n                                <Table.Cell></Table.Cell>\n                                <Table.Cell></Table.Cell>\n                                <Table.Cell></Table.Cell>\n                            </Table.Row>\n                        ))}\n                    </Table.Body>\n\n                    <Table.Footer>\n                        <Table.Row>\n                            {/*<Table.HeaderCell></Table.HeaderCell>*/}\n                            <Table.HeaderCell></Table.HeaderCell>\n                            <Table.HeaderCell>Total:</Table.HeaderCell>\n                            <Table.HeaderCell></Table.HeaderCell>\n                            <Table.HeaderCell></Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Footer>\n                </Table>\n            </div>\n        )\n    }\n}\n\nListOption.propTypes = {\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array,\n    optionListSelected: PropTypes.array,\n}","import React from 'react'\nimport {Button, Form, Header, Icon, Image, Modal} from 'semantic-ui-react'\nimport PropTypes from \"prop-types\";\nimport Moment from 'moment'\nimport momentLocalizer from 'react-widgets-moment';\nimport DateTimePicker from 'react-widgets/lib/DateTimePicker';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport { ListOption } from '../components/ListOption';\nimport 'semantic-ui-css/semantic.min.css';\n\nMoment.locale('vn')\nmomentLocalizer()\n\n\nexport class RoomDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            CheckinTimeSelected: (this.props.roominfo.fromTime ? new Date(this.props.roominfo.fromTime) : new Date()),\n            roomCurrentClass: (this.props.roominfo.roomCurrentClass ? this.props.roominfo.roomCurrentClass : ''),\n            optionListSelected: (this.props.roominfo.moreOptionId ? JSON.parse(this.props.roominfo.moreOptionId) : ''),\n        };\n\n        [\n            'redirectLink',\n            'getStatusDes',\n            'onChangePickedTime',\n            'handleChangeTypeIDSelect'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    redirectLink() {\n        let link = window.location.href;\n        window.location.href = link;\n    }\n\n    getStatusDes(status = '') {\n        let stt = this.props.statusList;\n        for (var i = 0; i < stt.length; i++) {\n            if (stt[i].key == status) {\n                return stt[i].text;\n            }\n        }\n    }\n\n    onChangePickedTime(val) {\n        this.setState({\n            CheckinTimeSelected: val\n        });\n    }\n\n    handleChangeTypeIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            roomCurrentClass: val['value']\n        });\n    }\n\n    render() {\n        const {roominfo, roomTypeOther} = this.props;\n        let imgsrc = roominfo.roomid ? 'images/room' + roominfo.roomid + '.png' : 'images/room101.png';\n\n        return (\n            <Modal style={{width: '100%'}} closeIcon trigger={<a className=\"image fit\"><img style={{boxShadow: '10px 10px 5px #ccc'}}\n                                                                    src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>}>\n                <Modal.Header>Room Detail</Modal.Header>\n                <Modal.Content image style={{height: '450%'}}>\n                    <Image size='medium' src={imgsrc} wrapped/>\n\n                    <Modal.Description style={{width: '100%'}}>\n                        <Header>{roominfo.roomDescription}</Header>\n                        <p>\n                            Status: {this.getStatusDes(roominfo.status)}\n                        </p>\n                        <hr/>\n                        <label>\n                            <b>Checkin:</b>\n                        </label>\n                        <div>\n                            <DateTimePicker value={this.state.CheckinTimeSelected} onChange={this.onChangePickedTime}/>\n                        </div>\n                        <hr/>\n                        <div>\n                            <Form.Select\n                                fluid\n                                icon=''\n                                label='Room Type:'\n                                value={this.state.roomCurrentClass}\n                                options={roomTypeOther}\n                                onChange={this.handleChangeTypeIDSelect}\n                                placeholder='Type'\n                            />\n                        </div>\n                        <hr/>\n                        <p>Add Options:</p>\n                        <ListOption listoptionIds={this.props.listoptionIds}\n                                    listoption={this.props.listoption}\n                                    optionListSelected={this.state.optionListSelected}/>\n                    </Modal.Description>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button primary onClick={this.redirectLink}>\n                        {/*<a href=\"http://localhost:3000/\" style={{color: 'white'}}>Proceed</a>*/}\n                        Proceed\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        );\n    }\n}\n\n\nRoomDetail.propTypes = {\n    roominfo: PropTypes.object,\n    statusList: PropTypes.array,\n    roomTypeOther: PropTypes.array,\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array,\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Image, Rail, Segment } from 'semantic-ui-react';\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react';\nimport { RoomDetail } from '../components/RoomDetail';\nimport { RoomDetailModel } from '../components/RoomDetailModel';\nimport 'semantic-ui-css/semantic.min.css';\n\nexport class ListRoomRows extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          open: false\n        };\n\n        [\n            'renderRow',\n            'refreshPage'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    refreshPage(){\n\n    }\n\n    renderDetail(room = []){\n        return <RoomDetail roominfo={room}\n                           statusList={this.props.statusList}\n                           roomTypeOther={this.props.roomTypeOther}\n                           listoptionIds={this.props.listoptionIds}\n                           listoption={this.props.listoption}/>;\n    }\n\n    renderRow() {\n        const {roomsInfo} = this.props;\n        return Array.prototype.map.call(roomsInfo, (room) => (\n            <div className=\"col-3 col-12-mobile\" key={room.roomid}>\n                <article className=\"item\">\n                    <div className=\"image fitfull\">\n                        {this.renderDetail(room)}\n                        {/*<a className=\"image fit\"><img style={{boxShadow: '10px 10px 5px #ccc'}} src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>*/}\n                    </div>\n                    <header>\n                        {room.status == 1 ? <h2 style={{backgroundColor: '#e1eaea'}}>Room {room.roomid}</h2> : <h2 style={{backgroundColor: '#ffd633'}}>Room {room.roomid}</h2>}\n                    </header>\n                </article>\n            </div>\n        ));\n    }\n\n    render() {\n        // console.log(this.props.roomInfo);\n        return (\n            <div className=\"row\">\n                {this.renderRow()}\n            </div>\n\n        );\n    }\n}\n\nListRoomRows.defaultProps = {\n    roomsInfo: []\n}\n\nListRoomRows.propTypes = {\n    roomsInfo: PropTypes.array,\n    statusList: PropTypes.array,\n    roomTypeOther: PropTypes.array,\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array\n}\n\n","import React, { Component } from 'react'\nimport { Button, Header, Image, Modal } from 'semantic-ui-react'\n\nexport class RoomDetailModel extends Component {\n    state = { open: false }\n\n    show = (dimmer) => () => this.setState({ dimmer, open: true })\n    close = () => this.setState({ open: false })\n\n    render() {\n        const { open, dimmer } = this.state\n\n        return (\n            <div>\n                <Button onClick={this.show(true)}>Default</Button>\n                <Button onClick={this.show('inverted')}>Inverted</Button>\n                <Button onClick={this.show('blurring')}>Blurring</Button>\n                <a className=\"image fit\"><img onClick={this.show('blurring')} style={{boxShadow: '10px 10px 5px #ccc'}} src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>\n\n                <Modal dimmer={dimmer} open={open} onClose={this.close}>\n                    <Modal.Header>Select a Photo</Modal.Header>\n                    <Modal.Content image>\n                        <Image\n                            wrapped\n                            size='medium'\n                            src='https://react.semantic-ui.com/images/avatar/large/rachel.png'\n                        />\n                        <Modal.Description>\n                            <Header>Default Profile Image</Header>\n                            <p>\n                                We've found the following gravatar image associated with your\n                                e-mail address.\n                            </p>\n                            <p>Is it okay to use this photo?</p>\n                        </Modal.Description>\n                    </Modal.Content>\n                    <Modal.Actions>\n                        <Button color='black' onClick={this.close}>\n                            Nope\n                        </Button>\n                        <Button\n                            positive\n                            icon='checkmark'\n                            labelPosition='right'\n                            content=\"Yep, that's me\"\n                            onClick={this.close}\n                        />\n                    </Modal.Actions>\n                </Modal>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Form} from 'semantic-ui-react';\nimport {Button, Card, Image} from 'semantic-ui-react';\nimport {Input} from 'semantic-ui-react';\nimport {Loader, Segment} from 'semantic-ui-react';\nimport {ListRoomRows} from '../components/ListRoomRows';\nimport { Dimmer } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nexport class IndexPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            rooms: [],\n            roomIds: [],\n            status: [],\n            statusIds: [],\n            roomTypeOther: [],\n            roomTypeOtherIds: [],\n            listoption: [],\n            listoptionIds: [],\n            roomidselected: '',\n            statusSelected: ''\n        };\n\n        [\n            'getListRoomDetails',\n            'setListRoom',\n            'handleChangeRoomIDSelect',\n            'handleChangeStatusIDSelect',\n            'getListStatus',\n            'renderSearchForm',\n            'renderListRooms',\n            'getroomTypeOther',\n            'getlistoption'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n\n    getListRoomDetails() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listRoomsDetail\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['roomid'];\n                        tmp2['text'] = tmp['roomDescription'];\n                        tmp2['value'] = tmp['roomid'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        isLoaded: true,\n                        rooms: strs,\n                        roomIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    getListStatus() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listStatus\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['statusId'];\n                        tmp2['text'] = tmp['description'];\n                        tmp2['value'] = tmp['statusId'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        status: strs,\n                        statusIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    getlistoption() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listoption\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['optionId'];\n                        tmp2['text'] = tmp['description'];\n                        tmp2['value'] = tmp['optionId'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        listoption: strs,\n                        listoptionIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    getroomTypeOther() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=PricebyOther\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['roomType'];\n                        tmp2['text'] = tmp['description'];\n                        tmp2['value'] = tmp['roomType'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        roomTypeOther: strs,\n                        roomTypeOtherIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    setListRoom() {\n        let Name = \"1\";\n        let Phone = \"2\";\n        let Company = \"3\";\n        let Company_Address = \"4\";\n        let isICMCenter = \"5\";\n        let RangeIncome = \"6\";\n        let Product = \"7\";\n        let encoded = \"Name=\" + Name + \"&Phone=\" + Phone + \"&Company=\" + Company + \"&Company_Address=\" + Company_Address + \"&isICMCenter=\" + isICMCenter + \"&RangeIncome=\" + RangeIncome + \"&Product=\" + Product;\n\n        fetch('https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec', {\n            method: 'POST',\n            body: encoded,\n            // body: JSON.stringify({\n            //     title: 'New title added',\n            //     body: 'New body added. Hello body.'\n            // }),\n            headers: {\n                \"Content-type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(response => {\n            console.log(response.json());\n        }).then(json => {\n            console.log(json);\n            // this.setState({\n            //     user:json\n            // });\n        });\n    }\n\n    renderSearchForm() {\n        let listRoomIds = this.state.roomIds;\n        let listStatusIds = this.state.statusIds;\n\n        return (\n            <div>\n                <Input fluid icon='search plus' action='Search' placeholder='Search...'/>\n                <br/>\n                <Form.Group widths='equal'>\n                    <Form.Select\n                        fluid\n                        icon =''\n                        label='RoomID'\n                        onChange={this.handleChangeRoomIDSelect}\n                        options={listRoomIds}\n                        placeholder='RoomIDs'\n                    />\n                    <Form.Select\n                        fluid\n                        icon=''\n                        label='Status'\n                        options={listStatusIds}\n                        onChange={this.handleChangeStatusIDSelect}\n                        placeholder='Status'\n                    />\n                </Form.Group>\n            </div>\n        );\n    }\n\n    renderListRooms() {\n        return (\n            <ListRoomRows roomsInfo={this.state.rooms}\n                          statusList={this.state.statusIds}\n                          roomTypeOther={this.state.roomTypeOtherIds}\n                          listoptionIds={this.state.listoptionIds}\n                          listoption={this.state.listoption} />\n        );\n    }\n\n    handleChangeRoomIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            roomidselected: val['value']\n        });\n    }\n\n    handleChangeStatusIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            statusSelected: val['value']\n        });\n    }\n\n    componentDidMount() {\n        this.getListRoomDetails();\n        this.getListStatus();\n        this.getroomTypeOther();\n        this.getlistoption();\n    }\n\n    render() {\n        if (this.state.isLoaded == false) {\n            return (<Segment>\n                        <Dimmer active inverted>\n                            <Loader size='large'>Loading</Loader>\n                        </Dimmer>\n                        <Image src='images/loader.png'/>\n                    </Segment>);\n        }\n        // console.log(this.state.statusIds);\n        // console.log(this.state.statusSelected);\n        return (\n            <div>\n                <Form>\n                    {this.renderSearchForm()}\n                    {this.renderListRooms()}\n                </Form>\n                <br/><br/>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {IndexPage} from './containers/IndexPage';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css'\n\nclass ThaiBinhHotel extends React.Component{\n    render(){\n        return <IndexPage/>;\n        // return <div>aaa</div>;\n    }\n}\n\nReactDOM.render(<ThaiBinhHotel />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}