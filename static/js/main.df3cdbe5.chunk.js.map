{"version":3,"sources":["components/ListOption.js","components/RoomDetail.js","components/ListRoomRows.js","components/RoomDetailModel.js","containers/IndexPage.js","serviceWorker.js","index.js"],"names":["formatNumber","num","toString","replace","ListOption","props","state","items","listoptionIds","slice","optionListSelected","length","option","description","option_id","price","quantity","total","forEach","method","bind","listOptionSlt","this","listOptionSltIds","map","item","push","listOptionIDsTmp","concat","listOptionIDsMerge","filter","pos","indexOf","setState","listoptionIdstmp","listoption","onChangeOption","pop","event","data","value","i","optionId","tmp","count","Segment","placeholder","textAlign","Grid","columns","relaxed","stackable","Column","Form","Label","Dropdown","options","selection","onChange","handleChangeDropdown","Input","disabled","type","max","min","handleChangeQuantity","Divider","horizontal","Statistic","size","Value","Button","content","icon","color","onClick","handleAddRow","Group","Table","striped","bordered","hover","style","width","label","handleRemoveRow","floated","key","Math","random","float","as","tag","hidden","React","Component","Moment","locale","momentLocalizer","RoomDetail","open","CheckinTimeSelected","roominfo","fromTime","Date","roomCurrentClass","moreOptionId","JSON","parse","window","location","reload","status","stt","statusList","text","val","console","log","stringify","roomTypeOther","imgsrc","roomid","Modal","closeIcon","trigger","className","boxShadow","src","alt","Header","Content","image","scrolling","height","Image","wrapped","Description","roomDescription","getStatusDes","onChangePickedTime","Select","fluid","handleChangeTypeIDSelect","ribbon","handleChangeOption","Actions","primary","redirectLink","ListRoomRows","room","roomsInfo","Array","prototype","call","renderDetail","backgroundColor","renderRow","defaultProps","IndexPage","isLoaded","rooms","roomIds","statusIds","roomTypeOtherIds","roomidselected","statusSelected","fetch","then","res","json","result","strs","ids","tmp2","error","body","headers","response","listRoomIds","listStatusIds","action","widths","handleChangeRoomIDSelect","handleChangeStatusIDSelect","getListRoomDetails","getListStatus","getroomTypeOther","getlistoption","Dimmer","active","inverted","Loader","renderSearchForm","renderListRooms","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ThaiBinhHotel","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.df3cdbe5.chunk.js","sourcesContent":["import _ from 'lodash'\nimport React from 'react'\nimport {Button, Form, Image, Input, List, Transition, Dropdown, Dimmer} from 'semantic-ui-react'\nimport {Icon} from 'semantic-ui-react'\nimport PropTypes from \"prop-types\";\nimport {Table} from 'semantic-ui-react';\nimport {Menu} from 'semantic-ui-react';\nimport TableBT from 'react-bootstrap/Table';\nimport {Loader, Segment} from 'semantic-ui-react';\nimport {Divider, Header, Grid, Label, Statistic} from 'semantic-ui-react'\n\nfunction formatNumber(num) {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}\n\nexport class ListOption extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: this.props.listoptionIds.slice(0, this.props.optionListSelected.length),\n            option: {\n                description: '',\n                option_id: null,\n                price: 0,\n                quantity: 0,\n                total: 0\n            },\n            listoptionIds: [],\n            optionListSelected: [],\n        };\n        [\n            'handleChangeDropdown',\n            'handleChangeQuantity',\n            'handleAddRow',\n            'handleRemoveRow',\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    componentDidMount() {\n        let listOptionSlt = this.props.optionListSelected;\n        let listOptionSltIds = [];\n        listOptionSlt && listOptionSlt.map(item => {\n            listOptionSltIds.push(item[\"option_id\"])\n        })\n\n        var listOptionIDsTmp = listOptionSltIds.concat(this.props.listoptionIds);\n        var listOptionIDsMerge = listOptionIDsTmp.filter((item, pos) => listOptionIDsTmp.indexOf(item) === pos);\n\n        this.setState({\n            items: listOptionIDsMerge.slice(0, this.props.optionListSelected.length)\n        });\n\n\n        //get List option for select\n        var listoptionIdstmp = {};\n        var listoptionIds = [];\n\n        this.props.listoption.map(item => {\n            listoptionIdstmp = {}\n            listoptionIdstmp['key'] = item['optionId'];\n            listoptionIdstmp['text'] = item['description'];\n            listoptionIdstmp['value'] = item['optionId'];\n            listoptionIds.push(listoptionIdstmp);\n        });\n        this.setState({\n            listoptionIds: listoptionIds,\n        });\n\n        //Set value for State: optionListSelected\n        this.setState({\n            optionListSelected: this.props.optionListSelected\n        });\n\n    }\n\n    handleAddRow() {\n        const option = this.state.option;\n        const optionListSelected = this.state.optionListSelected\n        optionListSelected.push(option);\n        this.setState({\n            optionListSelected: optionListSelected\n        });\n\n        this.props.onChangeOption(optionListSelected);\n    }\n\n    handleRemoveRow() {\n        const optionListSelected = this.state.optionListSelected\n        optionListSelected.pop();\n        this.setState({\n            optionListSelected: optionListSelected\n        });\n\n        this.props.onChangeOption(optionListSelected);\n    }\n\n    handleChangeQuantity(event, data) {\n        let option = this.state.option;\n        option['quantity'] = data.value;\n        option['total'] = data.value * option['price']\n\n        this.setState({\n            option: option,\n        });\n    }\n\n    handleChangeDropdown(event, data) {\n        const listoption = this.props.listoption;\n        for (let i = 0; i < listoption.length; i++) {\n            if (listoption[i].optionId == data.value) {\n                let tmp = listoption[i];\n                tmp['option_id'] = listoption[i].optionId;\n                tmp['quantity'] = 1;\n                tmp['total'] = tmp['price'];\n                this.setState({\n                    option: tmp,\n                });\n                break;\n            }\n        }\n    }\n\n    render() {\n        let items = this.state.optionListSelected;\n        const {listoptionIds} = this.props;\n        // console.log(this.props.listoptionIds);\n        // console.log(this.props.listoption);\n        // console.log(this.props.optionListSelected);\n        // console.log(this.state.listoptionIds)\n        // console.log(this.state.optionListSelected);\n        // debugger;\n        var count = 0;\n        return (\n            <div>\n                <div>\n                    <Segment placeholder textAlign='center'>\n                        <Grid columns={1} relaxed='very' stackable>\n                            <Grid.Column>\n                                <Form>\n                                    <Label>Loại SP:</Label>\n                                    <Dropdown\n                                        options={this.state.listoptionIds}\n                                        value={this.state.option.option_id}\n                                        placeholder='Choose an option'\n                                        selection\n                                        onChange={this.handleChangeDropdown}\n                                    />\n                                    <br/>\n                                    <br/>\n                                    <Label>Số lượng:</Label>\n                                    <Input\n                                        disabled={this.state.option.option_id == 0 || this.state.option.option_id == null}\n                                        placeholder='...'\n                                        type='number'\n                                        max='100'\n                                        min='0'\n                                        value={this.state.option.quantity}\n                                        onChange={this.handleChangeQuantity}\n                                    />\n                                    <br/>\n                                    <br/>\n                                    <Label> Số tiền/1\n                                        sp: <b>{formatNumber(this.state.option.price)} VND</b>\n                                    </Label>\n                                </Form>\n\n                                <Divider horizontal>Total</Divider>\n\n                                <Statistic horizontal size='tiny'>\n                                    <Statistic.Value>{formatNumber(this.state.option.total)}</Statistic.Value>\n                                    <Statistic.Label>vnd</Statistic.Label>\n                                </Statistic>\n                                <Button content='Add' icon='plus square' size='big' color='grey'\n                                        onClick={this.handleAddRow}\n                                        disabled={this.state.option.option_id == 0 || this.state.option.option_id == null || this.state.option.quantity == 0} />\n                            </Grid.Column>\n                        </Grid>\n                    </Segment>\n                </div>\n                <Button.Group>\n                </Button.Group>\n                {items ? <TableBT size=\"sm\" striped bordered hover style={{width: '100%'}}>\n                    <thead>\n                    <tr>\n                        <th></th>\n                        <th>\n                            <Button\n                                label='Remove'\n                                disabled={items.length === 0}\n                                icon='minus square'\n                                onClick={this.handleRemoveRow}\n                                floated='right'\n                            />\n                        </th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {items.map((item) => (\n                        <tr key={Math.random()}>\n                            {(item) && (\n                                [<td key={Math.random()}>\n                                    <b>{item.quantity} - {item.description}</b>\n                                </td>,\n                                <td key={Math.random()}>\n                                    <b style={{float: 'right'}}><Label as='a' color='olive' tag\n                                                                       size='large'>{formatNumber(item.total)} VND</Label></b>\n                                    <p hidden>{count = count + 1}</p>\n                                </td>]\n                            )\n                        }\n                        </tr>\n                    ))}\n                    </tbody>\n                </TableBT> : <div></div>\n                }\n            </div>\n        )\n    }\n}\n\nListOption.propTypes = {\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array,\n    optionListSelected: PropTypes.array,\n    onChangeOption: PropTypes.func,\n}","import React from 'react'\nimport {Button, Form, Header, Icon, Image, Label, Modal} from 'semantic-ui-react'\nimport PropTypes from \"prop-types\";\nimport Moment from 'moment'\nimport momentLocalizer from 'react-widgets-moment';\nimport DateTimePicker from 'react-widgets/lib/DateTimePicker';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport { ListOption } from '../components/ListOption';\nimport 'semantic-ui-css/semantic.min.css';\n\nMoment.locale('vn')\nmomentLocalizer()\n\n\nexport class RoomDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            CheckinTimeSelected: (this.props.roominfo.fromTime ? new Date(this.props.roominfo.fromTime) : new Date()),\n            roomCurrentClass: (this.props.roominfo.roomCurrentClass ? this.props.roominfo.roomCurrentClass : ''),\n            optionListSelected: (this.props.roominfo.moreOptionId ? JSON.parse(this.props.roominfo.moreOptionId) : ''),\n        };\n\n        [\n            'redirectLink',\n            'getStatusDes',\n            'onChangePickedTime',\n            'handleChangeTypeIDSelect',\n            'handleChangeOption',\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    redirectLink() {\n        window.location.reload(true)\n    }\n\n    getStatusDes(status = '') {\n        let stt = this.props.statusList;\n        for (var i = 0; i < stt.length; i++) {\n            if (stt[i].key == status) {\n                return stt[i].text;\n            }\n        }\n    }\n\n    onChangePickedTime(val) {\n        this.setState({\n            CheckinTimeSelected: val\n        });\n    }\n\n    handleChangeTypeIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            roomCurrentClass: val['value']\n        });\n    }\n\n    handleChangeOption(data = []){\n        console.log(JSON.stringify(data))\n    }\n\n    render() {\n        const {roominfo, roomTypeOther} = this.props;\n        let imgsrc = roominfo.roomid ? 'images/room' + roominfo.roomid + '.png' : 'images/room101.png';\n\n        return (\n            <Modal style={{width: '100%'}} closeIcon trigger={<a className=\"image fit\"><img style={{boxShadow: '10px 10px 5px #ccc'}}\n                                                                    src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>}>\n                <Modal.Header>Room Detail</Modal.Header>\n                <Modal.Content image scrolling style={{height: '450%'}}>\n                    <Image size='medium' src={imgsrc} wrapped/>\n\n                    <Modal.Description style={{width: '100%'}}>\n                        <Header>{roominfo.roomDescription}</Header>\n                        <b>\n                            Status: {this.getStatusDes(roominfo.status)}\n                        </b>\n                        <hr/>\n                        <label>\n                            <b>Checkin:</b>\n                        </label>\n                        <div>\n                            <DateTimePicker value={this.state.CheckinTimeSelected} onChange={this.onChangePickedTime}/>\n                        </div>\n                        <hr/>\n                        <div>\n                            <label>\n                                <b>Room Type:</b>\n                            </label>\n                            <Form.Select\n                                fluid\n                                icon=''\n                                // label='Room Type:'\n                                value={this.state.roomCurrentClass}\n                                options={roomTypeOther}\n                                onChange={this.handleChangeTypeIDSelect}\n                                placeholder='Type'\n                            />\n                        </div>\n                        <hr/>\n                        <Label as='a' color='teal' ribbon>\n                            Thêm Sản Phẩm:\n                        </Label>\n                        <ListOption listoptionIds={this.props.listoptionIds}\n                                    listoption={this.props.listoption}\n                                    onChangeOption={this.handleChangeOption}\n                                    optionListSelected={this.state.optionListSelected ? this.state.optionListSelected : []}/>\n                    </Modal.Description>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button primary onClick={this.redirectLink}>\n                        Not Yet!\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        );\n    }\n}\n\n\nRoomDetail.propTypes = {\n    roominfo: PropTypes.object,\n    statusList: PropTypes.array,\n    roomTypeOther: PropTypes.array,\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array,\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Image, Rail, Segment } from 'semantic-ui-react';\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react';\nimport { RoomDetail } from '../components/RoomDetail';\nimport { RoomDetailModel } from '../components/RoomDetailModel';\nimport 'semantic-ui-css/semantic.min.css';\n\nexport class ListRoomRows extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          open: false\n        };\n\n        [\n            'renderRow',\n            'refreshPage'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    refreshPage(){\n\n    }\n\n    renderDetail(room = []){\n        return <RoomDetail roominfo={room}\n                           statusList={this.props.statusList}\n                           roomTypeOther={this.props.roomTypeOther}\n                           listoptionIds={this.props.listoptionIds}\n                           listoption={this.props.listoption}/>;\n    }\n\n    renderRow() {\n        const {roomsInfo} = this.props;\n        return Array.prototype.map.call(roomsInfo, (room) => (\n            <div className=\"col-3 col-12-mobile\" key={room.roomid}>\n                <article className=\"item\">\n                    <div className=\"image fitfull\">\n                        {this.renderDetail(room)}\n                        {/*<a className=\"image fit\"><img style={{boxShadow: '10px 10px 5px #ccc'}} src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>*/}\n                    </div>\n                    <header>\n                        {room.status == 1 ? <h2 style={{backgroundColor: '#e1eaea'}}>Room {room.roomid}</h2> : <h2 style={{backgroundColor: '#ffd633'}}>Room {room.roomid}</h2>}\n                    </header>\n                </article>\n            </div>\n        ));\n    }\n\n    render() {\n        // console.log(this.props.roomInfo);\n        return (\n            <div className=\"row\">\n                {this.renderRow()}\n            </div>\n\n        );\n    }\n}\n\nListRoomRows.defaultProps = {\n    roomsInfo: []\n}\n\nListRoomRows.propTypes = {\n    roomsInfo: PropTypes.array,\n    statusList: PropTypes.array,\n    roomTypeOther: PropTypes.array,\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array\n}\n\n","import React, { Component } from 'react'\nimport { Button, Header, Image, Modal } from 'semantic-ui-react'\n\nexport class RoomDetailModel extends Component {\n    state = { open: false }\n\n    show = (dimmer) => () => this.setState({ dimmer, open: true })\n    close = () => this.setState({ open: false })\n\n    render() {\n        const { open, dimmer } = this.state\n\n        return (\n            <div>\n                <Button onClick={this.show(true)}>Default</Button>\n                <Button onClick={this.show('inverted')}>Inverted</Button>\n                <Button onClick={this.show('blurring')}>Blurring</Button>\n                <a className=\"image fit\"><img onClick={this.show('blurring')} style={{boxShadow: '10px 10px 5px #ccc'}} src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>\n\n                <Modal dimmer={dimmer} open={open} onClose={this.close}>\n                    <Modal.Header>Select a Photo</Modal.Header>\n                    <Modal.Content image>\n                        <Image\n                            wrapped\n                            size='medium'\n                            src='https://react.semantic-ui.com/images/avatar/large/rachel.png'\n                        />\n                        <Modal.Description>\n                            <Header>Default Profile Image</Header>\n                            <p>\n                                We've found the following gravatar image associated with your\n                                e-mail address.\n                            </p>\n                            <p>Is it okay to use this photo?</p>\n                        </Modal.Description>\n                    </Modal.Content>\n                    <Modal.Actions>\n                        <Button color='black' onClick={this.close}>\n                            Nope\n                        </Button>\n                        <Button\n                            positive\n                            icon='checkmark'\n                            labelPosition='right'\n                            content=\"Yep, that's me\"\n                            onClick={this.close}\n                        />\n                    </Modal.Actions>\n                </Modal>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Form} from 'semantic-ui-react';\nimport {Button, Card, Image} from 'semantic-ui-react';\nimport {Input} from 'semantic-ui-react';\nimport {Loader, Segment} from 'semantic-ui-react';\nimport {ListRoomRows} from '../components/ListRoomRows';\nimport { Dimmer } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nexport class IndexPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            rooms: [],\n            roomIds: [],\n            status: [],\n            statusIds: [],\n            roomTypeOther: [],\n            roomTypeOtherIds: [],\n            listoption: [],\n            listoptionIds: [],\n            roomidselected: '',\n            statusSelected: ''\n        };\n\n        [\n            'getListRoomDetails',\n            'setListRoom',\n            'handleChangeRoomIDSelect',\n            'handleChangeStatusIDSelect',\n            'getListStatus',\n            'renderSearchForm',\n            'renderListRooms',\n            'getroomTypeOther',\n            'getlistoption'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n\n    getListRoomDetails() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listRoomsDetail\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['roomid'];\n                        tmp2['text'] = tmp['roomDescription'];\n                        tmp2['value'] = tmp['roomid'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        isLoaded: true,\n                        rooms: strs,\n                        roomIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    getListStatus() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listStatus\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['statusId'];\n                        tmp2['text'] = tmp['description'];\n                        tmp2['value'] = tmp['statusId'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        status: strs,\n                        statusIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    getlistoption() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listoption\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        ids.push(tmp['optionId']);\n                    }\n                    this.setState({\n                        listoption: strs,\n                        listoptionIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    getroomTypeOther() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=PricebyOther\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['roomType'];\n                        tmp2['text'] = tmp['description'];\n                        tmp2['value'] = tmp['roomType'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        roomTypeOther: strs,\n                        roomTypeOtherIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    setListRoom() {\n        let Name = \"1\";\n        let Phone = \"2\";\n        let Company = \"3\";\n        let Company_Address = \"4\";\n        let isICMCenter = \"5\";\n        let RangeIncome = \"6\";\n        let Product = \"7\";\n        let encoded = \"Name=\" + Name + \"&Phone=\" + Phone + \"&Company=\" + Company + \"&Company_Address=\" + Company_Address + \"&isICMCenter=\" + isICMCenter + \"&RangeIncome=\" + RangeIncome + \"&Product=\" + Product;\n\n        fetch('https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec', {\n            method: 'POST',\n            body: encoded,\n            // body: JSON.stringify({\n            //     title: 'New title added',\n            //     body: 'New body added. Hello body.'\n            // }),\n            headers: {\n                \"Content-type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(response => {\n            console.log(response.json());\n        }).then(json => {\n            console.log(json);\n            // this.setState({\n            //     user:json\n            // });\n        });\n    }\n\n    renderSearchForm() {\n        let listRoomIds = this.state.roomIds;\n        let listStatusIds = this.state.statusIds;\n\n        return (\n            <div>\n                <Input fluid icon='search plus' action='Search' placeholder='Search...'/>\n                <br/>\n                <Form.Group widths='equal'>\n                    <Form.Select\n                        fluid\n                        icon =''\n                        label='RoomID'\n                        onChange={this.handleChangeRoomIDSelect}\n                        options={listRoomIds}\n                        placeholder='RoomIDs'\n                    />\n                    <Form.Select\n                        fluid\n                        icon=''\n                        label='Status'\n                        options={listStatusIds}\n                        onChange={this.handleChangeStatusIDSelect}\n                        placeholder='Status'\n                    />\n                </Form.Group>\n            </div>\n        );\n    }\n\n    renderListRooms() {\n        return (\n            <ListRoomRows roomsInfo={this.state.rooms}\n                          statusList={this.state.statusIds}\n                          roomTypeOther={this.state.roomTypeOtherIds}\n                          listoptionIds={this.state.listoptionIds}\n                          listoption={this.state.listoption} />\n        );\n    }\n\n    handleChangeRoomIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            roomidselected: val['value']\n        });\n    }\n\n    handleChangeStatusIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            statusSelected: val['value']\n        });\n    }\n\n    componentDidMount() {\n        this.getListRoomDetails();\n        this.getListStatus();\n        this.getroomTypeOther();\n        this.getlistoption();\n    }\n\n    render() {\n        if (this.state.isLoaded == false) {\n            return (<Segment>\n                        <Dimmer active inverted>\n                            <Loader size='large'>Loading</Loader>\n                        </Dimmer>\n                        <Image src='images/loader.png'/>\n                    </Segment>);\n        }\n        // console.log(this.state.statusIds);\n        // console.log(this.state.statusSelected);\n        return (\n            <div>\n                <Form>\n                    {this.renderSearchForm()}\n                    {this.renderListRooms()}\n                </Form>\n                <br/><br/>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {IndexPage} from './containers/IndexPage';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css'\n\nclass ThaiBinhHotel extends React.Component{\n    render(){\n        return <IndexPage/>;\n        // return <div>aaa</div>;\n    }\n}\n\nReactDOM.render(<ThaiBinhHotel />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}