{"version":3,"sources":["components/ListOption.js","components/RoomDetail.js","components/ListRoomRows.js","components/RoomDetailModel.js","containers/IndexPage.js","serviceWorker.js","index.js"],"names":["formatNumber","num","toString","replace","ListOption","props","handleAdd","optionListSelected","state","push","option","setState","prevState","items","listoptionIds","slice","length","handleRemove","handleChangeQuantityOld","event","data","itempar","console","log","target","i","option_id","quantity","value","description","price","total","forEach","method","bind","listOptionSlt","this","listOptionSltIds","map","item","listOptionIDsTmp","concat","listOptionIDsMerge","filter","pos","indexOf","listoptionIdstmp","listoption","optionId","tmp","count","Segment","placeholder","textAlign","Grid","columns","relaxed","stackable","Column","Form","Label","Dropdown","options","selection","onChange","handleChangeDropdown","Input","type","max","min","handleChangeQuantity","Divider","horizontal","Statistic","size","Value","Button","content","icon","color","Group","Table","striped","bordered","hover","style","width","label","disabled","onClick","floated","key","float","as","tag","hidden","React","Component","Moment","locale","momentLocalizer","RoomDetail","open","CheckinTimeSelected","roominfo","fromTime","Date","roomCurrentClass","moreOptionId","JSON","parse","link","window","location","href","status","stt","statusList","text","val","roomTypeOther","imgsrc","roomid","Modal","closeIcon","trigger","className","boxShadow","src","alt","Header","Content","image","scrolling","height","Image","wrapped","Description","roomDescription","getStatusDes","onChangePickedTime","Select","fluid","handleChangeTypeIDSelect","ribbon","Actions","primary","redirectLink","ListRoomRows","room","roomsInfo","Array","prototype","call","renderDetail","backgroundColor","renderRow","defaultProps","IndexPage","isLoaded","rooms","roomIds","statusIds","roomTypeOtherIds","roomidselected","statusSelected","fetch","then","res","json","result","strs","ids","tmp2","error","body","headers","response","listRoomIds","listStatusIds","action","widths","handleChangeRoomIDSelect","handleChangeStatusIDSelect","getListRoomDetails","getListStatus","getroomTypeOther","getlistoption","Dimmer","active","inverted","Loader","renderSearchForm","renderListRooms","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ThaiBinhHotel","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","contentType","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.78beda00.chunk.js","sourcesContent":["import _ from 'lodash'\nimport React from 'react'\nimport {Button, Form, Image, Input, List, Transition, Dropdown, Dimmer} from 'semantic-ui-react'\nimport {Icon} from 'semantic-ui-react'\nimport PropTypes from \"prop-types\";\nimport {Table} from 'semantic-ui-react';\nimport {Menu} from 'semantic-ui-react';\nimport TableBT from 'react-bootstrap/Table';\nimport {Loader, Segment} from 'semantic-ui-react';\nimport {Divider, Header, Grid, Label, Statistic} from 'semantic-ui-react'\n\nfunction formatNumber(num) {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}\n\nexport class ListOption extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: this.props.listoptionIds.slice(0, this.props.optionListSelected.length),\n            option: {\n                description: '',\n                option_id: null,\n                price: 0,\n                quantity: 0,\n                total: 0\n            },\n            listoptionIds: [],\n            optionListSelected: [],\n        };\n        [\n            'handleAdd',\n            'handleRemove',\n            'handleChangeDropdown',\n            'handleChangeQuantityOld',\n            'handleChangeQuantity'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    componentDidMount() {\n        let listOptionSlt = this.props.optionListSelected;\n        let listOptionSltIds = [];\n        listOptionSlt && listOptionSlt.map(item => {\n            listOptionSltIds.push(item[\"option_id\"])\n        })\n\n        var listOptionIDsTmp = listOptionSltIds.concat(this.props.listoptionIds);\n        var listOptionIDsMerge = listOptionIDsTmp.filter((item, pos) => listOptionIDsTmp.indexOf(item) === pos);\n\n        this.setState({\n            items: listOptionIDsMerge.slice(0, this.props.optionListSelected.length)\n        });\n\n\n        //get List option for select\n        var listoptionIdstmp = {};\n        var listoptionIds = [];\n\n        this.props.listoption.map(item => {\n            listoptionIdstmp = {}\n            listoptionIdstmp['key'] = item['optionId'];\n            listoptionIdstmp['text'] = item['description'];\n            listoptionIdstmp['value'] = item['optionId'];\n            listoptionIds.push(listoptionIdstmp);\n        });\n        this.setState({\n            listoptionIds: listoptionIds,\n        });\n\n        //Set value for State: optionListSelected\n        this.setState({\n            optionListSelected: this.props.optionListSelected\n        });\n\n    }\n\n    handleAdd = () => {\n        let optionListSelected = this.state.optionListSelected;\n        optionListSelected.push(this.state.option);\n        this.setState((prevState) => ({\n            items: this.props.listoptionIds.slice(0, prevState.items.length + 1),\n            optionListSelected: optionListSelected\n        }));\n    }\n\n    handleRemove = () =>\n        this.setState((prevState) => ({items: prevState.items.slice(0, -1)}))\n\n    handleChangeQuantityOld = (event, data, itempar) => {\n        console.log(event.target);\n        console.log(data);\n        console.log(itempar);\n\n        const optionListSelected = this.state.optionListSelected;\n        for (let i = 0; i < optionListSelected.length; i++) {\n            if (optionListSelected[i].option_id == itempar) {\n                optionListSelected[i].quantity = data.value;\n                break;\n            }\n        }\n\n        this.setState({\n            optionListSelected: optionListSelected\n        });\n    }\n\n    handleChangeQuantity(event, data) {\n        console.log(event);\n        console.log(data.value);\n\n        let listoption = this.props.listoption;\n        listoption['quantity'] =  data.value\n        this.setState({\n            option: listoption,\n        });\n    }\n\n    handleChangeDropdown(event, data) {\n        console.log(event);\n        console.log(data.value);\n\n        const listoption = this.props.listoption;\n        for (let i = 0; i < listoption.length; i++) {\n            console.log(listoption[i]);\n            if(listoption[i].optionId == data.value){\n                let tmp = listoption[i];\n                tmp['option_id'] = listoption[i].optionId;\n                tmp['quantity'] = 1;\n                console.log(tmp);\n                this.setState({\n                    option: tmp,\n                });\n                break;\n            }\n        }\n    }\n\n    render() {\n        const {items} = this.state;\n        const {listoptionIds} = this.props;\n        // console.log(this.props.listoptionIds);\n        console.log(this.props.listoption);\n        // console.log(this.state.items);\n        // console.log(this.props.optionListSelected);\n        // console.log(this.state.listoptionIds)\n        // console.log(this.state.optionListSelected);\n        // debugger;\n        var count = 0;\n        return (\n            <div>\n                <div>\n                    <Segment placeholder textAlign='center'>\n                        <Grid columns={1} relaxed='very' stackable>\n                            <Grid.Column>\n                                <Form>\n                                    <Label>Loại SP:</Label>\n                                    <Dropdown\n                                        options={this.state.listoptionIds}\n                                        value={this.state.option.option_id}\n                                        placeholder='Choose an option'\n                                        selection\n                                        onChange={this.handleChangeDropdown}\n                                    />\n                                    <br/>\n                                    <br/>\n                                    <Label>Số lượng:</Label>\n                                    <Input\n                                        placeholder='...'\n                                        type='number'\n                                        max='100'\n                                        min='0'\n                                        value={this.state.option.quantity}\n                                        onChange={this.handleChangeQuantity}\n                                    />\n                                    <br/>\n                                    <br/>\n                                    <Label> Số tiền/1\n                                        sp: <b>{formatNumber(this.state.option.price)} VND</b>\n                                    </Label>\n                                </Form>\n\n                                <Divider horizontal>Total</Divider>\n\n                                <Statistic horizontal size='tiny'>\n                                    <Statistic.Value>{formatNumber(1000000)}</Statistic.Value>\n                                    <Statistic.Label>vnd</Statistic.Label>\n                                </Statistic>\n                                <Button content='Add' icon='plus square' size='big' color='grey'/>\n                            </Grid.Column>\n                        </Grid>\n                    </Segment>\n                </div>\n                <Button.Group>\n                </Button.Group>\n                <TableBT size=\"sm\" striped bordered hover style={{width: '100%'}}>\n                    <thead>\n                    <tr>\n                        <th>Chi tiết</th>\n                        <th>\n                            <Button\n                                label='Remove'\n                                disabled={items.length === 0}\n                                icon='minus square'\n                                onClick={this.handleRemove}\n                                floated='right'\n                            />\n                        </th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {items.map((item) => (\n                        <tr key={item}>\n                            {(this.state.optionListSelected && this.state.optionListSelected[count]) && (\n                                [<td key={item}>\n                                    <b>{this.state.optionListSelected[count].quantity} - {this.state.optionListSelected[count].description}</b>\n                                </td>,\n                                    <td key={item + 1}>\n                                        <b style={{float: 'right'}}><Label as='a' color='olive' tag\n                                                                           size='large'>{formatNumber(this.state.optionListSelected[count].total)} VND</Label></b>\n                                        <p hidden>{count = count + 1}</p>\n                                    </td>]\n                            )\n                            }\n                        </tr>\n                    ))}\n                    </tbody>\n                </TableBT>\n            </div>\n        )\n    }\n}\n\nListOption.propTypes = {\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array,\n    optionListSelected: PropTypes.array,\n}","import React from 'react'\nimport {Button, Form, Header, Icon, Image, Label, Modal} from 'semantic-ui-react'\nimport PropTypes from \"prop-types\";\nimport Moment from 'moment'\nimport momentLocalizer from 'react-widgets-moment';\nimport DateTimePicker from 'react-widgets/lib/DateTimePicker';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport { ListOption } from '../components/ListOption';\nimport 'semantic-ui-css/semantic.min.css';\n\nMoment.locale('vn')\nmomentLocalizer()\n\n\nexport class RoomDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            CheckinTimeSelected: (this.props.roominfo.fromTime ? new Date(this.props.roominfo.fromTime) : new Date()),\n            roomCurrentClass: (this.props.roominfo.roomCurrentClass ? this.props.roominfo.roomCurrentClass : ''),\n            optionListSelected: (this.props.roominfo.moreOptionId ? JSON.parse(this.props.roominfo.moreOptionId) : ''),\n        };\n\n        [\n            'redirectLink',\n            'getStatusDes',\n            'onChangePickedTime',\n            'handleChangeTypeIDSelect'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    redirectLink() {\n        let link = window.location.href;\n        window.location.href = link;\n    }\n\n    getStatusDes(status = '') {\n        let stt = this.props.statusList;\n        for (var i = 0; i < stt.length; i++) {\n            if (stt[i].key == status) {\n                return stt[i].text;\n            }\n        }\n    }\n\n    onChangePickedTime(val) {\n        this.setState({\n            CheckinTimeSelected: val\n        });\n    }\n\n    handleChangeTypeIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            roomCurrentClass: val['value']\n        });\n    }\n\n    render() {\n        const {roominfo, roomTypeOther} = this.props;\n        let imgsrc = roominfo.roomid ? 'images/room' + roominfo.roomid + '.png' : 'images/room101.png';\n\n        return (\n            <Modal style={{width: '100%'}} closeIcon trigger={<a className=\"image fit\"><img style={{boxShadow: '10px 10px 5px #ccc'}}\n                                                                    src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>}>\n                <Modal.Header>Room Detail</Modal.Header>\n                <Modal.Content image scrolling style={{height: '450%'}}>\n                    <Image size='medium' src={imgsrc} wrapped/>\n\n                    <Modal.Description style={{width: '100%'}}>\n                        <Header>{roominfo.roomDescription}</Header>\n                        <b>\n                            Status: {this.getStatusDes(roominfo.status)}\n                        </b>\n                        <hr/>\n                        <label>\n                            <b>Checkin:</b>\n                        </label>\n                        <div>\n                            <DateTimePicker value={this.state.CheckinTimeSelected} onChange={this.onChangePickedTime}/>\n                        </div>\n                        <hr/>\n                        <div>\n                            <label>\n                                <b>Room Type:</b>\n                            </label>\n                            <Form.Select\n                                fluid\n                                icon=''\n                                // label='Room Type:'\n                                value={this.state.roomCurrentClass}\n                                options={roomTypeOther}\n                                onChange={this.handleChangeTypeIDSelect}\n                                placeholder='Type'\n                            />\n                        </div>\n                        <hr/>\n                        <Label as='a' color='teal' ribbon>\n                            Thêm Sản Phẩm:\n                        </Label>\n                        <ListOption listoptionIds={this.props.listoptionIds}\n                                    listoption={this.props.listoption}\n                                    optionListSelected={this.state.optionListSelected ? this.state.optionListSelected : []}/>\n                    </Modal.Description>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button primary onClick={this.redirectLink}>\n                        Not Yet!\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        );\n    }\n}\n\n\nRoomDetail.propTypes = {\n    roominfo: PropTypes.object,\n    statusList: PropTypes.array,\n    roomTypeOther: PropTypes.array,\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array,\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Image, Rail, Segment } from 'semantic-ui-react';\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react';\nimport { RoomDetail } from '../components/RoomDetail';\nimport { RoomDetailModel } from '../components/RoomDetailModel';\nimport 'semantic-ui-css/semantic.min.css';\n\nexport class ListRoomRows extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          open: false\n        };\n\n        [\n            'renderRow',\n            'refreshPage'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    refreshPage(){\n\n    }\n\n    renderDetail(room = []){\n        return <RoomDetail roominfo={room}\n                           statusList={this.props.statusList}\n                           roomTypeOther={this.props.roomTypeOther}\n                           listoptionIds={this.props.listoptionIds}\n                           listoption={this.props.listoption}/>;\n    }\n\n    renderRow() {\n        const {roomsInfo} = this.props;\n        return Array.prototype.map.call(roomsInfo, (room) => (\n            <div className=\"col-3 col-12-mobile\" key={room.roomid}>\n                <article className=\"item\">\n                    <div className=\"image fitfull\">\n                        {this.renderDetail(room)}\n                        {/*<a className=\"image fit\"><img style={{boxShadow: '10px 10px 5px #ccc'}} src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>*/}\n                    </div>\n                    <header>\n                        {room.status == 1 ? <h2 style={{backgroundColor: '#e1eaea'}}>Room {room.roomid}</h2> : <h2 style={{backgroundColor: '#ffd633'}}>Room {room.roomid}</h2>}\n                    </header>\n                </article>\n            </div>\n        ));\n    }\n\n    render() {\n        // console.log(this.props.roomInfo);\n        return (\n            <div className=\"row\">\n                {this.renderRow()}\n            </div>\n\n        );\n    }\n}\n\nListRoomRows.defaultProps = {\n    roomsInfo: []\n}\n\nListRoomRows.propTypes = {\n    roomsInfo: PropTypes.array,\n    statusList: PropTypes.array,\n    roomTypeOther: PropTypes.array,\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array\n}\n\n","import React, { Component } from 'react'\nimport { Button, Header, Image, Modal } from 'semantic-ui-react'\n\nexport class RoomDetailModel extends Component {\n    state = { open: false }\n\n    show = (dimmer) => () => this.setState({ dimmer, open: true })\n    close = () => this.setState({ open: false })\n\n    render() {\n        const { open, dimmer } = this.state\n\n        return (\n            <div>\n                <Button onClick={this.show(true)}>Default</Button>\n                <Button onClick={this.show('inverted')}>Inverted</Button>\n                <Button onClick={this.show('blurring')}>Blurring</Button>\n                <a className=\"image fit\"><img onClick={this.show('blurring')} style={{boxShadow: '10px 10px 5px #ccc'}} src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>\n\n                <Modal dimmer={dimmer} open={open} onClose={this.close}>\n                    <Modal.Header>Select a Photo</Modal.Header>\n                    <Modal.Content image>\n                        <Image\n                            wrapped\n                            size='medium'\n                            src='https://react.semantic-ui.com/images/avatar/large/rachel.png'\n                        />\n                        <Modal.Description>\n                            <Header>Default Profile Image</Header>\n                            <p>\n                                We've found the following gravatar image associated with your\n                                e-mail address.\n                            </p>\n                            <p>Is it okay to use this photo?</p>\n                        </Modal.Description>\n                    </Modal.Content>\n                    <Modal.Actions>\n                        <Button color='black' onClick={this.close}>\n                            Nope\n                        </Button>\n                        <Button\n                            positive\n                            icon='checkmark'\n                            labelPosition='right'\n                            content=\"Yep, that's me\"\n                            onClick={this.close}\n                        />\n                    </Modal.Actions>\n                </Modal>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Form} from 'semantic-ui-react';\nimport {Button, Card, Image} from 'semantic-ui-react';\nimport {Input} from 'semantic-ui-react';\nimport {Loader, Segment} from 'semantic-ui-react';\nimport {ListRoomRows} from '../components/ListRoomRows';\nimport { Dimmer } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nexport class IndexPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            rooms: [],\n            roomIds: [],\n            status: [],\n            statusIds: [],\n            roomTypeOther: [],\n            roomTypeOtherIds: [],\n            listoption: [],\n            listoptionIds: [],\n            roomidselected: '',\n            statusSelected: ''\n        };\n\n        [\n            'getListRoomDetails',\n            'setListRoom',\n            'handleChangeRoomIDSelect',\n            'handleChangeStatusIDSelect',\n            'getListStatus',\n            'renderSearchForm',\n            'renderListRooms',\n            'getroomTypeOther',\n            'getlistoption'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n\n    getListRoomDetails() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listRoomsDetail\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['roomid'];\n                        tmp2['text'] = tmp['roomDescription'];\n                        tmp2['value'] = tmp['roomid'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        isLoaded: true,\n                        rooms: strs,\n                        roomIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    getListStatus() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listStatus\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['statusId'];\n                        tmp2['text'] = tmp['description'];\n                        tmp2['value'] = tmp['statusId'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        status: strs,\n                        statusIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    getlistoption() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listoption\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        ids.push(tmp['optionId']);\n                    }\n                    this.setState({\n                        listoption: strs,\n                        listoptionIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    getroomTypeOther() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=PricebyOther\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['roomType'];\n                        tmp2['text'] = tmp['description'];\n                        tmp2['value'] = tmp['roomType'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        roomTypeOther: strs,\n                        roomTypeOtherIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    setListRoom() {\n        let Name = \"1\";\n        let Phone = \"2\";\n        let Company = \"3\";\n        let Company_Address = \"4\";\n        let isICMCenter = \"5\";\n        let RangeIncome = \"6\";\n        let Product = \"7\";\n        let encoded = \"Name=\" + Name + \"&Phone=\" + Phone + \"&Company=\" + Company + \"&Company_Address=\" + Company_Address + \"&isICMCenter=\" + isICMCenter + \"&RangeIncome=\" + RangeIncome + \"&Product=\" + Product;\n\n        fetch('https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec', {\n            method: 'POST',\n            body: encoded,\n            // body: JSON.stringify({\n            //     title: 'New title added',\n            //     body: 'New body added. Hello body.'\n            // }),\n            headers: {\n                \"Content-type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(response => {\n            console.log(response.json());\n        }).then(json => {\n            console.log(json);\n            // this.setState({\n            //     user:json\n            // });\n        });\n    }\n\n    renderSearchForm() {\n        let listRoomIds = this.state.roomIds;\n        let listStatusIds = this.state.statusIds;\n\n        return (\n            <div>\n                <Input fluid icon='search plus' action='Search' placeholder='Search...'/>\n                <br/>\n                <Form.Group widths='equal'>\n                    <Form.Select\n                        fluid\n                        icon =''\n                        label='RoomID'\n                        onChange={this.handleChangeRoomIDSelect}\n                        options={listRoomIds}\n                        placeholder='RoomIDs'\n                    />\n                    <Form.Select\n                        fluid\n                        icon=''\n                        label='Status'\n                        options={listStatusIds}\n                        onChange={this.handleChangeStatusIDSelect}\n                        placeholder='Status'\n                    />\n                </Form.Group>\n            </div>\n        );\n    }\n\n    renderListRooms() {\n        return (\n            <ListRoomRows roomsInfo={this.state.rooms}\n                          statusList={this.state.statusIds}\n                          roomTypeOther={this.state.roomTypeOtherIds}\n                          listoptionIds={this.state.listoptionIds}\n                          listoption={this.state.listoption} />\n        );\n    }\n\n    handleChangeRoomIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            roomidselected: val['value']\n        });\n    }\n\n    handleChangeStatusIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            statusSelected: val['value']\n        });\n    }\n\n    componentDidMount() {\n        this.getListRoomDetails();\n        this.getListStatus();\n        this.getroomTypeOther();\n        this.getlistoption();\n    }\n\n    render() {\n        if (this.state.isLoaded == false) {\n            return (<Segment>\n                        <Dimmer active inverted>\n                            <Loader size='large'>Loading</Loader>\n                        </Dimmer>\n                        <Image src='images/loader.png'/>\n                    </Segment>);\n        }\n        // console.log(this.state.statusIds);\n        // console.log(this.state.statusSelected);\n        return (\n            <div>\n                <Form>\n                    {this.renderSearchForm()}\n                    {this.renderListRooms()}\n                </Form>\n                <br/><br/>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {IndexPage} from './containers/IndexPage';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css'\n\nclass ThaiBinhHotel extends React.Component{\n    render(){\n        return <IndexPage/>;\n        // return <div>aaa</div>;\n    }\n}\n\nReactDOM.render(<ThaiBinhHotel />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}