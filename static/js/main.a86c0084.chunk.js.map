{"version":3,"sources":["components/ListOption.js","components/RoomDetail.js","components/ListRoomRows.js","components/RoomDetailModel.js","containers/IndexPage.js","serviceWorker.js","index.js"],"names":["formatNumber","num","toString","replace","ListOption","props","handleAdd","setState","prevState","items","listoptionIds","slice","length","handleRemove","state","optionListSelected","option","description","option_id","price","quantity","forEach","method","bind","listOptionSlt","this","listOptionSltIds","map","item","push","listOptionIDsTmp","concat","listOptionIDsMerge","filter","pos","indexOf","listoptionIdstmp","listoption","count","Button","Group","disabled","icon","onClick","Table","size","striped","bordered","hover","style","width","key","Dropdown","onChange","handleChange","options","placeholder","value","selection","Input","type","hidden","borderWidth","React","Component","Moment","locale","momentLocalizer","RoomDetail","open","CheckinTimeSelected","roominfo","fromTime","Date","roomCurrentClass","moreOptionId","JSON","parse","link","window","location","href","status","stt","statusList","i","text","val","event","roomTypeOther","imgsrc","roomid","Modal","closeIcon","trigger","className","boxShadow","src","alt","Header","Content","image","scrolling","height","Image","wrapped","Description","roomDescription","getStatusDes","onChangePickedTime","Form","Select","fluid","label","handleChangeTypeIDSelect","Actions","primary","redirectLink","ListRoomRows","room","roomsInfo","Array","prototype","call","renderDetail","backgroundColor","renderRow","defaultProps","IndexPage","isLoaded","rooms","roomIds","statusIds","roomTypeOtherIds","roomidselected","statusSelected","fetch","then","res","json","result","strs","ids","tmp","tmp2","error","body","headers","response","console","log","listRoomIds","listStatusIds","action","widths","handleChangeRoomIDSelect","handleChangeStatusIDSelect","getListRoomDetails","getListStatus","getroomTypeOther","getlistoption","Segment","Dimmer","active","inverted","Loader","renderSearchForm","renderListRooms","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ThaiBinhHotel","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","contentType","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a86c0084.chunk.js","sourcesContent":["import _ from 'lodash'\nimport React from 'react'\nimport {Button, Form, Image, Input, List, Transition, Dropdown, Dimmer} from 'semantic-ui-react'\nimport {Icon} from 'semantic-ui-react'\nimport PropTypes from \"prop-types\";\nimport {Table} from 'semantic-ui-react';\nimport {Label, Menu} from 'semantic-ui-react';\nimport TableBT from 'react-bootstrap/Table';\nimport {Loader, Segment} from 'semantic-ui-react';\n\nfunction formatNumber(num) {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}\n\nexport class ListOption extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: this.props.listoptionIds.slice(0, this.props.optionListSelected.length),\n            option: {\n                description: '',\n                option_id: 1,\n                price: 0,\n                quantity: 1\n            },\n            listoptionIds: [],\n            optionListSelected: [],\n        };\n        [\n            'handleAdd',\n            'handleRemove',\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    componentDidMount() {\n        let listOptionSlt = this.props.optionListSelected;\n        let listOptionSltIds = [];\n        listOptionSlt.map(item => {\n            listOptionSltIds.push(item[\"option_id\"])\n        })\n\n        var listOptionIDsTmp = listOptionSltIds.concat(this.props.listoptionIds);\n        var listOptionIDsMerge = listOptionIDsTmp.filter((item, pos) => listOptionIDsTmp.indexOf(item) === pos);\n\n        this.setState({\n            items: listOptionIDsMerge.slice(0, this.props.optionListSelected.length)\n        });\n\n\n        //get List option for select\n        var listoptionIdstmp = {};\n        var listoptionIds = [];\n\n        this.props.listoption.map(item => {\n            listoptionIdstmp = {}\n            listoptionIdstmp['key'] = item['optionId'];\n            listoptionIdstmp['text'] = item['description'];\n            listoptionIdstmp['value'] = item['optionId'];\n            listoptionIds.push(listoptionIdstmp);\n        });\n        this.setState({\n            listoptionIds: listoptionIds,\n        });\n\n        //Set value for State: optionListSelected\n        this.setState({\n            optionListSelected: this.props.optionListSelected\n        });\n\n    }\n\n    handleAdd = () =>\n        this.setState((prevState) => ({\n            items: this.props.listoptionIds.slice(0, prevState.items.length + 1),\n        }))\n\n    handleRemove = () =>\n        this.setState((prevState) => ({items: prevState.items.slice(0, -1)}))\n\n    render() {\n        const {items} = this.state;\n        const {listoptionIds} = this.props;\n        // console.log(this.props.listoptionIds);\n        // console.log(this.props.listoption);\n        // console.log(this.state.items);\n        // console.log(this.props.optionListSelected);\n        // console.log(this.state.listoptionIds)\n        // console.log(this.state.optionListSelected);\n        // debugger;\n        var count = 0;\n        return (\n            <div>\n                <Button.Group>\n                    <Button\n                        disabled={items.length === 0}\n                        icon='minus square'\n                        onClick={this.handleRemove}\n                    />\n\n                    <Button\n                        disabled={items.length === this.props.listoptionIds.length}\n                        icon='plus square'\n                        onClick={this.handleAdd}\n                    />\n                </Button.Group>\n                <TableBT size=\"sm\" striped bordered hover style={{width: '100%'}}>\n                    <thead>\n                    <tr>\n                        <th></th>\n                        {/*<th>Description</th>*/}\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {items.map((item) => (\n                        <tr key={item}>\n                            <td>\n                                {(this.state.optionListSelected && this.state.optionListSelected[count]) ? (\n                                    <div>\n                                        <label><b>Loại SP:</b></label><br/>\n                                        <Dropdown\n                                            key={item}\n                                            onChange={this.handleChange}\n                                            options={this.state.listoptionIds}\n                                            placeholder='Choose an option'\n                                            value={this.state.optionListSelected[count].option_id}\n                                            selection\n                                        />\n                                        <hr/>\n                                        <label><b>Số lượng:</b></label><br/>\n                                        <Input type=\"number\" value={this.state.optionListSelected[count].quantity}/>\n                                        <hr/>\n                                        <p>Số tiền/1 sp: <b>{formatNumber(this.state.optionListSelected[count].price)} VND</b></p>\n                                        <div hidden>{count = count + 1}</div>\n                                        <hr style={{borderWidth: '5px'}}/>\n                                    </div>\n                                ) :\n                                    (\n                                        <div>\n                                            <label><b>Loại SP:</b></label><br/>\n                                            <Dropdown\n                                                key={item}\n                                                onChange={this.handleChange}\n                                                options={this.state.listoptionIds}\n                                                placeholder='Choose an option'\n                                                selection\n                                            />\n                                            <hr/>\n                                            <label><b>Số lượng:</b></label><br/>\n                                            <Input type=\"number\" value={1}/>\n                                            <hr/>\n                                            <p>Số tiền/1 sp: <b>{formatNumber(0)} VND</b></p>\n                                            <div hidden>{count = count + 1}</div>\n                                            <hr style={{borderWidth: '5px'}}/>\n                                        </div>\n                                    )\n                                }\n                            </td>\n                        </tr>\n                    ))}\n                    </tbody>\n                </TableBT>\n            </div>\n        )\n    }\n}\n\nListOption.propTypes = {\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array,\n    optionListSelected: PropTypes.array,\n}","import React from 'react'\nimport {Button, Form, Header, Icon, Image, Modal} from 'semantic-ui-react'\nimport PropTypes from \"prop-types\";\nimport Moment from 'moment'\nimport momentLocalizer from 'react-widgets-moment';\nimport DateTimePicker from 'react-widgets/lib/DateTimePicker';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport { ListOption } from '../components/ListOption';\nimport 'semantic-ui-css/semantic.min.css';\n\nMoment.locale('vn')\nmomentLocalizer()\n\n\nexport class RoomDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            CheckinTimeSelected: (this.props.roominfo.fromTime ? new Date(this.props.roominfo.fromTime) : new Date()),\n            roomCurrentClass: (this.props.roominfo.roomCurrentClass ? this.props.roominfo.roomCurrentClass : ''),\n            optionListSelected: (this.props.roominfo.moreOptionId ? JSON.parse(this.props.roominfo.moreOptionId) : ''),\n        };\n\n        [\n            'redirectLink',\n            'getStatusDes',\n            'onChangePickedTime',\n            'handleChangeTypeIDSelect'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    redirectLink() {\n        let link = window.location.href;\n        window.location.href = link;\n    }\n\n    getStatusDes(status = '') {\n        let stt = this.props.statusList;\n        for (var i = 0; i < stt.length; i++) {\n            if (stt[i].key == status) {\n                return stt[i].text;\n            }\n        }\n    }\n\n    onChangePickedTime(val) {\n        this.setState({\n            CheckinTimeSelected: val\n        });\n    }\n\n    handleChangeTypeIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            roomCurrentClass: val['value']\n        });\n    }\n\n    render() {\n        const {roominfo, roomTypeOther} = this.props;\n        let imgsrc = roominfo.roomid ? 'images/room' + roominfo.roomid + '.png' : 'images/room101.png';\n\n        return (\n            <Modal style={{width: '100%'}} closeIcon trigger={<a className=\"image fit\"><img style={{boxShadow: '10px 10px 5px #ccc'}}\n                                                                    src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>}>\n                <Modal.Header>Room Detail</Modal.Header>\n                <Modal.Content image scrolling style={{height: '450%'}}>\n                    <Image size='medium' src={imgsrc} wrapped/>\n\n                    <Modal.Description style={{width: '100%'}}>\n                        <Header>{roominfo.roomDescription}</Header>\n                        <p>\n                            Status: {this.getStatusDes(roominfo.status)}\n                        </p>\n                        <hr/>\n                        <label>\n                            <b>Checkin:</b>\n                        </label>\n                        <div>\n                            <DateTimePicker value={this.state.CheckinTimeSelected} onChange={this.onChangePickedTime}/>\n                        </div>\n                        <hr/>\n                        <div>\n                            <Form.Select\n                                fluid\n                                icon=''\n                                label='Room Type:'\n                                value={this.state.roomCurrentClass}\n                                options={roomTypeOther}\n                                onChange={this.handleChangeTypeIDSelect}\n                                placeholder='Type'\n                            />\n                        </div>\n                        <hr/>\n                        <p>Add Options:</p>\n                        <ListOption listoptionIds={this.props.listoptionIds}\n                                    listoption={this.props.listoption}\n                                    optionListSelected={this.state.optionListSelected}/>\n                    </Modal.Description>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button primary onClick={this.redirectLink}>\n                        {/*<a href=\"http://localhost:3000/\" style={{color: 'white'}}>Proceed</a>*/}\n                        Proceed\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        );\n    }\n}\n\n\nRoomDetail.propTypes = {\n    roominfo: PropTypes.object,\n    statusList: PropTypes.array,\n    roomTypeOther: PropTypes.array,\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array,\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Image, Rail, Segment } from 'semantic-ui-react';\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react';\nimport { RoomDetail } from '../components/RoomDetail';\nimport { RoomDetailModel } from '../components/RoomDetailModel';\nimport 'semantic-ui-css/semantic.min.css';\n\nexport class ListRoomRows extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          open: false\n        };\n\n        [\n            'renderRow',\n            'refreshPage'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    refreshPage(){\n\n    }\n\n    renderDetail(room = []){\n        return <RoomDetail roominfo={room}\n                           statusList={this.props.statusList}\n                           roomTypeOther={this.props.roomTypeOther}\n                           listoptionIds={this.props.listoptionIds}\n                           listoption={this.props.listoption}/>;\n    }\n\n    renderRow() {\n        const {roomsInfo} = this.props;\n        return Array.prototype.map.call(roomsInfo, (room) => (\n            <div className=\"col-3 col-12-mobile\" key={room.roomid}>\n                <article className=\"item\">\n                    <div className=\"image fitfull\">\n                        {this.renderDetail(room)}\n                        {/*<a className=\"image fit\"><img style={{boxShadow: '10px 10px 5px #ccc'}} src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>*/}\n                    </div>\n                    <header>\n                        {room.status == 1 ? <h2 style={{backgroundColor: '#e1eaea'}}>Room {room.roomid}</h2> : <h2 style={{backgroundColor: '#ffd633'}}>Room {room.roomid}</h2>}\n                    </header>\n                </article>\n            </div>\n        ));\n    }\n\n    render() {\n        // console.log(this.props.roomInfo);\n        return (\n            <div className=\"row\">\n                {this.renderRow()}\n            </div>\n\n        );\n    }\n}\n\nListRoomRows.defaultProps = {\n    roomsInfo: []\n}\n\nListRoomRows.propTypes = {\n    roomsInfo: PropTypes.array,\n    statusList: PropTypes.array,\n    roomTypeOther: PropTypes.array,\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array\n}\n\n","import React, { Component } from 'react'\nimport { Button, Header, Image, Modal } from 'semantic-ui-react'\n\nexport class RoomDetailModel extends Component {\n    state = { open: false }\n\n    show = (dimmer) => () => this.setState({ dimmer, open: true })\n    close = () => this.setState({ open: false })\n\n    render() {\n        const { open, dimmer } = this.state\n\n        return (\n            <div>\n                <Button onClick={this.show(true)}>Default</Button>\n                <Button onClick={this.show('inverted')}>Inverted</Button>\n                <Button onClick={this.show('blurring')}>Blurring</Button>\n                <a className=\"image fit\"><img onClick={this.show('blurring')} style={{boxShadow: '10px 10px 5px #ccc'}} src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>\n\n                <Modal dimmer={dimmer} open={open} onClose={this.close}>\n                    <Modal.Header>Select a Photo</Modal.Header>\n                    <Modal.Content image>\n                        <Image\n                            wrapped\n                            size='medium'\n                            src='https://react.semantic-ui.com/images/avatar/large/rachel.png'\n                        />\n                        <Modal.Description>\n                            <Header>Default Profile Image</Header>\n                            <p>\n                                We've found the following gravatar image associated with your\n                                e-mail address.\n                            </p>\n                            <p>Is it okay to use this photo?</p>\n                        </Modal.Description>\n                    </Modal.Content>\n                    <Modal.Actions>\n                        <Button color='black' onClick={this.close}>\n                            Nope\n                        </Button>\n                        <Button\n                            positive\n                            icon='checkmark'\n                            labelPosition='right'\n                            content=\"Yep, that's me\"\n                            onClick={this.close}\n                        />\n                    </Modal.Actions>\n                </Modal>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Form} from 'semantic-ui-react';\nimport {Button, Card, Image} from 'semantic-ui-react';\nimport {Input} from 'semantic-ui-react';\nimport {Loader, Segment} from 'semantic-ui-react';\nimport {ListRoomRows} from '../components/ListRoomRows';\nimport { Dimmer } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nexport class IndexPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            rooms: [],\n            roomIds: [],\n            status: [],\n            statusIds: [],\n            roomTypeOther: [],\n            roomTypeOtherIds: [],\n            listoption: [],\n            listoptionIds: [],\n            roomidselected: '',\n            statusSelected: ''\n        };\n\n        [\n            'getListRoomDetails',\n            'setListRoom',\n            'handleChangeRoomIDSelect',\n            'handleChangeStatusIDSelect',\n            'getListStatus',\n            'renderSearchForm',\n            'renderListRooms',\n            'getroomTypeOther',\n            'getlistoption'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n\n    getListRoomDetails() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listRoomsDetail\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['roomid'];\n                        tmp2['text'] = tmp['roomDescription'];\n                        tmp2['value'] = tmp['roomid'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        isLoaded: true,\n                        rooms: strs,\n                        roomIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    getListStatus() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listStatus\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['statusId'];\n                        tmp2['text'] = tmp['description'];\n                        tmp2['value'] = tmp['statusId'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        status: strs,\n                        statusIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    getlistoption() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listoption\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        ids.push(tmp['optionId']);\n                    }\n                    this.setState({\n                        listoption: strs,\n                        listoptionIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    getroomTypeOther() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=PricebyOther\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['roomType'];\n                        tmp2['text'] = tmp['description'];\n                        tmp2['value'] = tmp['roomType'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        roomTypeOther: strs,\n                        roomTypeOtherIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoaded: false,\n                    });\n                }\n            )\n    }\n\n    setListRoom() {\n        let Name = \"1\";\n        let Phone = \"2\";\n        let Company = \"3\";\n        let Company_Address = \"4\";\n        let isICMCenter = \"5\";\n        let RangeIncome = \"6\";\n        let Product = \"7\";\n        let encoded = \"Name=\" + Name + \"&Phone=\" + Phone + \"&Company=\" + Company + \"&Company_Address=\" + Company_Address + \"&isICMCenter=\" + isICMCenter + \"&RangeIncome=\" + RangeIncome + \"&Product=\" + Product;\n\n        fetch('https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec', {\n            method: 'POST',\n            body: encoded,\n            // body: JSON.stringify({\n            //     title: 'New title added',\n            //     body: 'New body added. Hello body.'\n            // }),\n            headers: {\n                \"Content-type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(response => {\n            console.log(response.json());\n        }).then(json => {\n            console.log(json);\n            // this.setState({\n            //     user:json\n            // });\n        });\n    }\n\n    renderSearchForm() {\n        let listRoomIds = this.state.roomIds;\n        let listStatusIds = this.state.statusIds;\n\n        return (\n            <div>\n                <Input fluid icon='search plus' action='Search' placeholder='Search...'/>\n                <br/>\n                <Form.Group widths='equal'>\n                    <Form.Select\n                        fluid\n                        icon =''\n                        label='RoomID'\n                        onChange={this.handleChangeRoomIDSelect}\n                        options={listRoomIds}\n                        placeholder='RoomIDs'\n                    />\n                    <Form.Select\n                        fluid\n                        icon=''\n                        label='Status'\n                        options={listStatusIds}\n                        onChange={this.handleChangeStatusIDSelect}\n                        placeholder='Status'\n                    />\n                </Form.Group>\n            </div>\n        );\n    }\n\n    renderListRooms() {\n        return (\n            <ListRoomRows roomsInfo={this.state.rooms}\n                          statusList={this.state.statusIds}\n                          roomTypeOther={this.state.roomTypeOtherIds}\n                          listoptionIds={this.state.listoptionIds}\n                          listoption={this.state.listoption} />\n        );\n    }\n\n    handleChangeRoomIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            roomidselected: val['value']\n        });\n    }\n\n    handleChangeStatusIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            statusSelected: val['value']\n        });\n    }\n\n    componentDidMount() {\n        this.getListRoomDetails();\n        this.getListStatus();\n        this.getroomTypeOther();\n        this.getlistoption();\n    }\n\n    render() {\n        if (this.state.isLoaded == false) {\n            return (<Segment>\n                        <Dimmer active inverted>\n                            <Loader size='large'>Loading</Loader>\n                        </Dimmer>\n                        <Image src='images/loader.png'/>\n                    </Segment>);\n        }\n        // console.log(this.state.statusIds);\n        // console.log(this.state.statusSelected);\n        return (\n            <div>\n                <Form>\n                    {this.renderSearchForm()}\n                    {this.renderListRooms()}\n                </Form>\n                <br/><br/>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {IndexPage} from './containers/IndexPage';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css'\n\nclass ThaiBinhHotel extends React.Component{\n    render(){\n        return <IndexPage/>;\n        // return <div>aaa</div>;\n    }\n}\n\nReactDOM.render(<ThaiBinhHotel />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}