{"version":3,"sources":["components/ListOption.js","components/RoomDetailCheckin.js","components/RoomDetailCheckout.js","components/ListRoomRows.js","containers/IndexPage.js","serviceWorker.js","index.js"],"names":["formatNumber","num","toString","replace","ListOption","props","console","log","state","items","listoptionIds","slice","optionListSelected","length","option","description","optionid","price","quantity","total","totalOptions","forEach","method","bind","listOptionSlt","this","listOptionSltIds","map","item","push","listOptionIDsTmp","concat","listOptionIDsMerge","filter","pos","indexOf","setState","listoptionIdstmp","listoption","flagNew","i","startsWith","parseInt","onChangeOption","pop","event","data","isNaN","value","toast","info","tmp","optionId","val","total_option","count","Segment","placeholder","textAlign","Grid","columns","relaxed","stackable","Column","Form","Label","Dropdown","options","selection","onChange","handleChangeDropdown","Input","disabled","type","max","min","handleChangeQuantity","Divider","horizontal","size","handleOptionOtherChange","Statistic","Value","Button","content","icon","color","onClick","handleAddRow","Group","Table","striped","bordered","hover","style","width","label","handleRemoveRow","floated","key","Math","random","float","as","tag","hidden","React","Component","Moment","locale","momentLocalizer","isMobile","Android","navigator","userAgent","match","BlackBerry","iOS","Opera","Windows","any","RoomDetailCheckin","open","CheckinTimeSelected","roominfo","fromTime","Date","CheckoutTimeSelected","toTime","roomCurrentClass","moreOptionId","JSON","parse","roomDetailOpen","isSubmiting","CheckinDate","substr","getFullYear","getMonth","getDate","CheckinTime","getHours","getMinutes","CheckoutDate","CheckoutTime","roomId","roomid","id","checkinTime","roomClass","stringify","totalOptionPrice","error","UpdateCheckInRoom","status","stt","statusList","text","roomTypeOther","imgsrc","Modal","closeIcon","onClose","trigger","className","boxShadow","handleShowModal","src","alt","Header","Content","image","scrolling","height","Image","wrapped","Description","roomDescription","getStatusDes","handleChangeInputDate","name","handleChangeInputTime","onChangePickedTime","display","handleChangeInputCheckoutDate","handleChangeInputCheckoutTime","onChangePickedCheckoutTime","Select","fluid","handleChangeTypeIDSelect","ribbon","handleChangeOption","Actions","primary","checkoutRoomSubmit","checkinRoomSubmit","handleHideModal","ListRoomRows","room","roomsInfo","Array","prototype","call","renderDetail","backgroundColor","renderRow","defaultProps","IndexPage","isLoadedRooms","isLoadedParam","rooms","roomIds","statusIds","roomTypeOtherIds","roomidselected","statusSelected","fetch","then","res","json","result","strs","ids","tmp2","newstr","formatted_date","current_datetime","getSeconds","encoded","body","headers","response","a","msgerr","success","position","POSITION","TOP_RIGHT","handleClearSearching","action","checkoutTime","getListRoomDetails","Dimmer","active","inverted","Loader","listRoomIds","listStatusIds","styleDisable","padded","attached","widths","handleChangeRoomIDSelect","handleChangeStatusIDSelect","getListStatus","getroomTypeOther","getlistoption","fontSize","renderSearchForm","renderListRooms","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ThaiBinhHotel","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6c60768a.chunk.js","sourcesContent":["import React from 'react'\nimport {Button, Form, Input, Dropdown, Divider, Grid, Label, Statistic} from 'semantic-ui-react'\nimport PropTypes from \"prop-types\";\nimport TableBT from 'react-bootstrap/Table';\nimport {Segment} from 'semantic-ui-react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../App.css';\n\nfunction formatNumber(num) {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}\n\nexport class ListOption extends React.Component {\n    constructor(props) {\n        console.log('constructor');\n        super(props);\n        this.state = {\n            items: this.props.listoptionIds.slice(0, this.props.optionListSelected.length),\n            option: {\n                description: '',\n                optionid: null,\n                price: 0,\n                quantity: 0,\n                total: 0\n            },\n            listoptionIds: [],\n            optionListSelected: [],\n            totalOptions: 0,\n        };\n        [\n            'handleChangeDropdown',\n            'handleChangeQuantity',\n            'handleAddRow',\n            'handleRemoveRow',\n            'handleOptionOtherChange'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    componentDidMount() {\n        console.log('componentDidMount');\n        let listOptionSlt = this.props.optionListSelected;\n        let listOptionSltIds = [];\n        listOptionSlt && listOptionSlt.map(item => {\n            listOptionSltIds.push(item[\"optionid\"])\n        })\n\n        var listOptionIDsTmp = listOptionSltIds.concat(this.props.listoptionIds);\n        var listOptionIDsMerge = listOptionIDsTmp.filter((item, pos) => listOptionIDsTmp.indexOf(item) === pos);\n\n        this.setState({\n            items: listOptionIDsMerge.slice(0, this.props.optionListSelected.length)\n        });\n\n\n        //get List option for select\n        var listoptionIdstmp = {};\n        var listoptionIds = [];\n\n        this.props.listoption.map(item => {\n            listoptionIdstmp = {}\n            listoptionIdstmp['key'] = item['optionId'];\n            listoptionIdstmp['text'] = item['description'];\n            listoptionIdstmp['value'] = item['optionId'];\n            listoptionIds.push(listoptionIdstmp);\n        });\n        this.setState({\n            listoptionIds: listoptionIds,\n        });\n\n        //Set value for State: optionListSelected\n        this.setState({\n            optionListSelected: this.props.optionListSelected\n        });\n\n    }\n\n\n    handleAddRow() {\n        console.log('handleAddRow');\n        const option = {...this.state.option};\n        let optionListSelected = this.state.optionListSelected;\n        let flagNew = true;\n        for (let i = 0; i < optionListSelected.length; i++) {\n            if (optionListSelected[i].optionid == option.optionid) {\n                if(optionListSelected[i].description.startsWith(\"Other\")){\n                    optionListSelected[i].quantity = 1;\n                    optionListSelected[i].total = option.total;\n                } else {\n                    optionListSelected[i].quantity = parseInt(option.quantity) + parseInt(optionListSelected[i].quantity);\n                    optionListSelected[i].total = parseInt(optionListSelected[i].quantity) * parseInt(optionListSelected[i].price);\n                }\n                flagNew = false;\n                break;\n            }\n        }\n        console.log(optionListSelected);\n        if (flagNew) {\n            optionListSelected.push(option);\n        }\n        this.setState({\n            optionListSelected: optionListSelected\n        });\n\n        this.props.onChangeOption(optionListSelected);\n    }\n\n    handleRemoveRow() {\n        console.log('handleRemoveRow');\n        const optionListSelected = this.state.optionListSelected;\n        optionListSelected.pop();\n        this.setState({\n            optionListSelected: optionListSelected\n        });\n\n        this.props.onChangeOption(optionListSelected);\n    }\n\n    handleChangeQuantity(event, data) {\n        console.log('handleChangeQuantity');\n        if(!data){\n            return;\n        }\n        if (isNaN(data.value)) {\n            return\n        } else {\n            if (parseInt(data.value) < 0 || parseInt(data.value) > 100) {\n                toast.info('Số lượng phải từ 0 - 100');\n                return;\n            }\n        }\n        let option = {...this.state.option};\n        option['quantity'] = parseInt(data.value);\n        option['total'] = parseInt(data.value) * parseInt(option['price']);\n\n        this.setState({\n            option: option,\n        });\n    }\n\n    handleChangeDropdown(event, data) {\n        console.log('handleChangeDropdown');\n        const listoption = this.props.listoption;\n        let tmp = [];\n        for (let i = 0; i < listoption.length; i++) {\n            if (listoption[i].optionId == data.value) {\n                tmp = [];\n                tmp = listoption[i];\n                tmp['optionid'] = listoption[i].optionId;\n                tmp['quantity'] = 1;\n                tmp['total'] = tmp['price'];\n                break;\n            }\n        }\n        this.setState({\n            option: tmp,\n        });\n    }\n\n    handleOptionOtherChange(val, data){\n        let tmp = {...this.state.option};\n        tmp['total'] = (parseInt(data.value) ? parseInt(data.value) : 0);\n        console.log(tmp);\n        this.setState({\n           option: tmp\n        });\n    }\n\n    render() {\n        console.log('render');\n        const items = this.state.optionListSelected;\n\n        // console.log(items);\n        // console.log(this.props.listoptionIds);\n        // console.log(this.props.listoption);\n        // console.log(this.props.optionListSelected);\n        // console.log(this.state.listoptionIds)\n        // console.log(this.state.optionListSelected);\n        // debugger;\n        var total_option = 0;\n        var count = 0;\n        return (\n            <div>\n                <div>\n                    <Segment placeholder textAlign='center'>\n                        <Grid columns={1} relaxed='very' stackable>\n                            <Grid.Column>\n                                <Form>\n                                    <Label>Loại SP:</Label>\n                                    <Dropdown\n                                        options={this.state.listoptionIds}\n                                        value={this.state.option.optionid}\n                                        placeholder='Choose an option'\n                                        selection\n                                        onChange={this.handleChangeDropdown}\n                                    />\n                                    <br/>\n                                    <br/>\n                                    <Label>Số lượng:</Label>\n                                    <Input\n                                        disabled={this.state.option.optionid == 0 || this.state.option.optionid == null || this.state.option.description.startsWith(\"Other\")}\n                                        placeholder='...'\n                                        type='number'\n                                        max='100'\n                                        min='0'\n                                        value={this.state.option.quantity}\n                                        onChange={this.handleChangeQuantity}\n                                    />\n                                    <br/>\n                                    <br/>\n                                    <Label> Số tiền/1\n                                        sp: <b>{formatNumber(this.state.option.price)} VND</b>\n                                    </Label>\n                                    <br/>\n                                    <br/>\n                                    {/*<Label style={{display: this.state.errMessQuantity}} basic color='red'*/}\n                                    {/*       pointing='left'>*/}\n                                    {/*    Số lượng từ phải từ 0 - 100*/}\n                                    {/*</Label>*/}\n                                </Form>\n\n                                <Divider horizontal>Total</Divider>\n\n                                {this.state.option.description.startsWith(\"Other\")\n                                    ? <div>\n                                        <Input size=\"small\" type=\"number\" value={this.state.option.total} onChange={this.handleOptionOtherChange}/>\n                                        <br/><br/>\n                                     </div>\n                                    : <Statistic horizontal size='tiny'>\n                                        <Statistic.Value>{formatNumber(this.state.option.total)}</Statistic.Value>\n                                        <Statistic.Label>vnd</Statistic.Label>\n                                     </Statistic>\n                                }\n\n                                <Button content='Add' icon='plus square' size='big' color='grey'\n                                        onClick={this.handleAddRow}\n                                        disabled={this.state.option.optionid == 0 || this.state.option.optionid == null || this.state.option.quantity == 0 || this.state.option.total == 0}/>\n                            </Grid.Column>\n                        </Grid>\n                    </Segment>\n                </div>\n                <Button.Group>\n                </Button.Group>\n                {this.state.optionListSelected ? <TableBT size=\"sm\" striped bordered hover style={{width: '100%'}}>\n                    <thead>\n                    <tr>\n                        <th></th>\n                        <th>\n                            <Button\n                                label='Remove'\n                                disabled={this.state.optionListSelected.length === 0}\n                                icon='minus square'\n                                onClick={this.handleRemoveRow}\n                                floated='right'\n                            />\n                        </th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.optionListSelected.map((item) => (\n                        <tr key={Math.random()}>\n                            {(item) && (\n                                [<td key={Math.random()}>\n                                    <b>{item.quantity} - {item.description}</b>\n                                </td>,\n                                    <td key={Math.random()}>\n                                        <b style={{float: 'right'}}><Label as='a' color='olive' tag\n                                                                           size='large'>{formatNumber(item.total)} VND</Label></b>\n                                        <p hidden>{count = count + 1} {total_option = total_option + item.total}</p>\n                                    </td>]\n                            )\n                            }\n                        </tr>\n                    ))}\n                    </tbody>\n                    <tfoot>\n                    <tr>\n                        <td></td>\n                        <td>\n                            <b style={{float: 'right'}}><Label as='a' color='yellow' tag\n                                                               size='large'>{formatNumber(total_option)} VND</Label></b>\n                        </td>\n                    </tr>\n                    </tfoot>\n                </TableBT> : <div></div>\n                }\n            </div>\n        )\n    }\n}\n\nListOption.propTypes = {\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array,\n    optionListSelected: PropTypes.array,\n    onChangeOption: PropTypes.func,\n}","import React from 'react'\nimport {Button, Form, Header, Image, Input, Label, Modal} from 'semantic-ui-react'\nimport PropTypes from \"prop-types\";\nimport Moment from 'moment'\nimport momentLocalizer from 'react-widgets-moment';\nimport DateTimePicker from 'react-widgets/lib/DateTimePicker';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport {ListOption} from '../components/ListOption';\nimport 'semantic-ui-css/semantic.min.css';\nimport {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../App.css';\n\nMoment.locale('vn')\nmomentLocalizer()\n\nconst isMobile = {\n    Android: function () {\n        return navigator.userAgent.match(/Android/i);\n    },\n    BlackBerry: function () {\n        return navigator.userAgent.match(/BlackBerry/i);\n    },\n    iOS: function () {\n        return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n    },\n    Opera: function () {\n        return navigator.userAgent.match(/Opera Mini/i);\n    },\n    Windows: function () {\n        return navigator.userAgent.match(/IEMobile/i);\n    },\n    any: function () {\n        return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());\n    }\n};\n\nexport class RoomDetailCheckin extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            CheckinTimeSelected: (this.props.roominfo.fromTime ? new Date(this.props.roominfo.fromTime.replace(/[A-Za-z]/g, ' ')) : new Date()),\n            CheckoutTimeSelected: (this.props.roominfo.toTime ? new Date(this.props.roominfo.toTime.replace(/[A-Za-z]/g, ' ')) : new Date()),\n            roomCurrentClass: (this.props.roominfo.roomCurrentClass ? this.props.roominfo.roomCurrentClass : ''),\n            optionListSelected: (this.props.roominfo.moreOptionId ? JSON.parse(this.props.roominfo.moreOptionId) : ''),\n            roomDetailOpen: false,\n            isSubmiting: false,\n            CheckinDate: (this.props.roominfo.fromTime ? this.props.roominfo.fromTime.substr(0, 10) : ((new Date()).getFullYear() + \"-\" + ((new Date()).getMonth() + 1) + \"-\" + (new Date()).getDate())),\n            CheckinTime: (this.props.roominfo.fromTime ? this.props.roominfo.fromTime.substr(11, 5) : ((new Date()).getHours() + \":\" + ((new Date()).getMinutes()))),\n            CheckoutDate: (this.props.roominfo.toTime ? this.props.roominfo.toTime.substr(0, 10) : ((new Date()).getFullYear() + \"-\" + ((new Date()).getMonth() + 1) + \"-\" + (new Date()).getDate())),\n            CheckoutTime: (this.props.roominfo.toTime ? this.props.roominfo.toTime.substr(11, 5) : ((new Date()).getHours() + \":\" + ((new Date()).getMinutes())))\n        };\n\n        [\n            'checkinRoomSubmit',\n            'getStatusDes',\n            'onChangePickedTime',\n            'handleChangeTypeIDSelect',\n            'handleChangeOption',\n            'handleShowModal',\n            'handleHideModal',\n            'handleChangeInputDate',\n            'handleChangeInputTime',\n            'handleChangeInputCheckoutDate',\n            'handleChangeInputCheckoutTime',\n            'checkoutRoomSubmit',\n            'onChangePickedCheckoutTime'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    async checkoutRoomSubmit(){\n        console.log(this.state.CheckoutDate);\n        console.log(this.state.CheckoutTime);\n        console.log(this.state.CheckoutTimeSelected);\n        this.setState({\n            isSubmiting: true\n        });\n    }\n\n    async checkinRoomSubmit() {\n        // window.location.reload(true);\n        this.setState({\n            isSubmiting: true\n        });\n        let action = 'checkin';\n        let roomId = this.props.roominfo.roomid;\n        let id = this.props.roominfo.id;\n        let checkinTime = '';\n        if (isMobile.iOS()) {\n            checkinTime = this.state.CheckinDate + \" \" + this.state.CheckinTime;\n            console.log(checkinTime)\n        } else {\n            checkinTime = this.state.CheckinTimeSelected;\n        }\n        let roomClass = this.state.roomCurrentClass;\n        let options = JSON.stringify(this.state.optionListSelected);\n\n        let totalOptionPrice = 0;\n        for (let i = 0; i < this.state.optionListSelected.length; i++) {\n            totalOptionPrice = totalOptionPrice + this.state.optionListSelected[i].total;\n        }\n\n        if (!checkinTime) {\n            toast.error('Bạn chưa chọn giờ vào!');\n            this.setState({\n                isSubmiting: false\n            });\n            return;\n        }\n        if (!roomClass) {\n            toast.error('Bạn chưa chọn loại phòng!');\n            this.setState({\n                isSubmiting: false\n            });\n            return;\n        }\n\n        await this.props.UpdateCheckInRoom(id, checkinTime, roomClass, options, totalOptionPrice, roomId);\n        // await sleep(5000);\n        this.setState({\n            roomDetailOpen: false,\n            isSubmiting: false\n        });\n    }\n\n    getStatusDes(status = '') {\n        let stt = this.props.statusList;\n        for (var i = 0; i < stt.length; i++) {\n            if (stt[i].key == status) {\n                return stt[i].text;\n            }\n        }\n    }\n\n    onChangePickedTime(val) {\n        this.setState({\n            CheckinTimeSelected: val\n        });\n    }\n\n    onChangePickedCheckoutTime(val) {\n        this.setState({\n            CheckoutTimeSelected: val\n        });\n    }\n\n    handleChangeTypeIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            roomCurrentClass: val['value']\n        });\n    }\n\n    handleChangeOption(data = []) {\n        this.setState({\n            optionListSelected: data\n        });\n    }\n\n    handleShowModal() {\n        this.setState({\n            roomDetailOpen: true\n        });\n    }\n\n    handleHideModal() {\n        this.setState({\n            roomDetailOpen: false\n        });\n    }\n\n    handleChangeInputDate(val, data) {\n        this.setState({\n            CheckinDate: data.value\n        });\n    }\n\n    handleChangeInputCheckoutDate(val, data) {\n        this.setState({\n            CheckoutDate: data.value\n        });\n    }\n\n    handleChangeInputCheckoutTime(val, data) {\n        this.setState({\n            CheckoutTime: data.value\n        });\n    }\n\n    handleChangeInputTime(val, data) {\n        this.setState({\n            CheckinTime: data.value\n        });\n    }\n\n    render() {\n        const {roominfo, roomTypeOther} = this.props;\n        let imgsrc = roominfo.roomid ? 'images/room' + roominfo.roomid + '.png' : 'images/room101.png';\n\n        return (\n            <Modal style={{width: '100%'}} open={this.state.roomDetailOpen} closeIcon\n                   onClose={() => {\n                       this.setState({roomDetailOpen: false})\n                   }}\n                   trigger={<a className=\"image fit\"><img style={{boxShadow: '10px 10px 5px #ccc'}}\n                                                          onClick={this.handleShowModal}\n                                                          src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>}>\n                <Modal.Header>Room Detail</Modal.Header>\n                <Modal.Content image scrolling style={{height: '450%'}}>\n                    <Image size='medium' src={imgsrc} wrapped/>\n                    <Modal.Description style={{width: '100%'}}>\n                        <Header>{roominfo.roomDescription}</Header>\n                        <b>\n                            Status: {this.getStatusDes(roominfo.status)}\n                        </b>\n                        <hr/>\n                        <label>\n                            <b>Checkin:</b>\n                        </label>\n                        <div>\n                            {!isMobile.iOS() ? <DateTimePicker value={this.state.CheckinTimeSelected}\n                                                               onChange={this.onChangePickedTime}/> :\n                                <div style={{width: '100%'}}><Input style={{width: '50%'}}\n                                                                    onChange={this.handleChangeInputDate}\n                                                                    value={this.state.CheckinDate} type=\"date\"\n                                                                    name=\"CheckinDate\"/>\n                                    <Input style={{width: '50%'}} onChange={this.handleChangeInputTime}\n                                           value={this.state.CheckinTime} type=\"time\" name=\"CheckinTime\"/>\n                                </div>\n                            }\n                        </div>\n\n                        <div style={{display: this.props.roominfo.status == 0?'':'none'}}>\n                            <br/>\n                            <label>\n                                <b style={{color: \"#00bfff\"}}>CheckOut:</b>\n                            </label>\n                            {!isMobile.iOS() ? <DateTimePicker value={this.state.CheckoutTimeSelected}\n                                                               onChange={this.onChangePickedCheckoutTime}/> :\n                                <div style={{width: '100%'}}><Input style={{width: '50%'}}\n                                                                    onChange={this.handleChangeInputCheckoutDate}\n                                                                    value={this.state.CheckoutDate} type=\"date\"\n                                                                    name=\"CheckoutDate\"/>\n                                    <Input style={{width: '50%'}} onChange={this.handleChangeInputCheckoutTime}\n                                           value={this.state.CheckoutTime} type=\"time\" name=\"CheckoutTime\"/>\n                                </div>\n                            }\n                        </div>\n                        <hr/>\n                        <div>\n                            <label>\n                                <b>Room Type:</b>\n                            </label>\n                            <Form.Select\n                                fluid\n                                icon=''\n                                // label='Room Type:'\n                                value={this.state.roomCurrentClass}\n                                options={roomTypeOther}\n                                onChange={this.handleChangeTypeIDSelect}\n                                placeholder='Type'\n                            />\n                        </div>\n                        <hr/>\n                        <Label as='a' color='teal' ribbon>\n                            Thêm Sản Phẩm:\n                        </Label>\n                        <ListOption listoptionIds={this.props.listoptionIds}\n                                    listoption={this.props.listoption}\n                                    onChangeOption={this.handleChangeOption}\n                                    optionListSelected={this.state.optionListSelected ? this.state.optionListSelected : []}/>\n                    </Modal.Description>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button primary onClick={this.checkoutRoomSubmit} disabled={this.state.isSubmiting}\n                            style={{display: (this.props.roominfo.status == 0 ? '':'none')}}>\n                        CheckOut\n                    </Button>\n                    <Button primary onClick={this.checkinRoomSubmit} disabled={this.state.isSubmiting}>\n                        {this.props.roominfo.status == 1 ? \"CheckIn\" : \"Update\"}\n                    </Button>\n                    <Button primary onClick={this.handleHideModal} disabled={this.state.isSubmiting}>\n                        Close\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        );\n    }\n}\n\n\nRoomDetailCheckin.propTypes = {\n    roominfo: PropTypes.object,\n    statusList: PropTypes.array,\n    roomTypeOther: PropTypes.array,\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array,\n    UpdateCheckInRoom: PropTypes.func\n}","import React from 'react'\nimport {Button, Form, Header, Image, Label, Modal, Input} from 'semantic-ui-react'\nimport PropTypes from \"prop-types\";\nimport Moment from 'moment'\nimport momentLocalizer from 'react-widgets-moment';\nimport DateTimePicker from 'react-widgets/lib/DateTimePicker';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport {ListOption} from '../components/ListOption';\nimport 'semantic-ui-css/semantic.min.css';\nimport {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../App.css';\n\n\nMoment.locale('vn');\nmomentLocalizer();\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst isMobile = {\n    Android: function () {\n        return navigator.userAgent.match(/Android/i);\n    },\n    BlackBerry: function () {\n        return navigator.userAgent.match(/BlackBerry/i);\n    },\n    iOS: function () {\n        return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n    },\n    Opera: function () {\n        return navigator.userAgent.match(/Opera Mini/i);\n    },\n    Windows: function () {\n        return navigator.userAgent.match(/IEMobile/i);\n    },\n    any: function () {\n        return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());\n    }\n};\n\nexport class RoomDetailCheckout extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            CheckinTimeSelected: (this.props.roominfo.fromTime ? new Date(this.props.roominfo.fromTime.replace(/[A-Za-z]/g, ' ')) : new Date()),\n            roomCurrentClass: (this.props.roominfo.roomCurrentClass ? this.props.roominfo.roomCurrentClass : ''),\n            optionListSelected: (this.props.roominfo.moreOptionId ? JSON.parse(this.props.roominfo.moreOptionId) : ''),\n            roomDetailOpen: false,\n            isSubmiting: false,\n            CheckinDate: (this.props.roominfo.fromTime ? this.props.roominfo.fromTime.substr(0, 10) : ((new Date()).getFullYear() + \"-\" + ((new Date()).getMonth() + 1) + \"-\" + (new Date()).getDate())),\n            CheckinTime: (this.props.roominfo.fromTime ? this.props.roominfo.fromTime.substr(11, 5) : ((new Date()).getHours() + \":\" + ((new Date()).getMinutes())))\n        };\n\n        [\n            'checkinRoomSubmit',\n            'getStatusDes',\n            'onChangePickedTime',\n            'handleChangeTypeIDSelect',\n            'handleChangeOption',\n            'handleShowModal',\n            'handleHideModal',\n            'handleChangeInputDate',\n            'handleChangeInputTime'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    async checkinRoomSubmit() {\n        // window.location.reload(true);\n        await this.setState({\n            isSubmiting: true\n        });\n        let action = 'checkin';\n        let roomId = this.props.roominfo.roomid;\n        let id = this.props.roominfo.id;\n        let checkinTime = '';\n        if (isMobile.iOS()) {\n            checkinTime = this.state.CheckinDate + \" \" + this.state.CheckinTime;\n            console.log(checkinTime)\n        } else {\n            checkinTime = this.state.CheckinTimeSelected;\n        }\n        let roomClass = this.state.roomCurrentClass;\n        let options = JSON.stringify(this.state.optionListSelected);\n\n        let totalOptionPrice = 0;\n        for (let i = 0; i < this.state.optionListSelected.length; i++) {\n            totalOptionPrice = totalOptionPrice + this.state.optionListSelected[i].total;\n        }\n\n        if (!checkinTime) {\n            toast.error('Bạn chưa chọn giờ vào!');\n            this.setState({\n                isSubmiting: false\n            });\n            return;\n        }\n        if (!roomClass) {\n            toast.error('Bạn chưa chọn loại phòng!');\n            this.setState({\n                isSubmiting: false\n            });\n            return;\n        }\n\n        await this.props.UpdateCheckInRoom(id, checkinTime, roomClass, options, totalOptionPrice, roomId);\n        // await sleep(5000);\n        await this.setState({\n            roomDetailOpen: false,\n            isSubmiting: false\n        });\n    }\n\n    getStatusDes(status = '') {\n        let stt = this.props.statusList;\n        for (var i = 0; i < stt.length; i++) {\n            if (stt[i].key == status) {\n                return stt[i].text;\n            }\n        }\n    }\n\n    onChangePickedTime(val) {\n        this.setState({\n            CheckinTimeSelected: val\n        });\n    }\n\n    handleChangeTypeIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            roomCurrentClass: val['value']\n        });\n    }\n\n    handleChangeOption(data = []) {\n        this.setState({\n            optionListSelected: data\n        });\n    }\n\n    handleShowModal() {\n        this.setState({\n            roomDetailOpen: true\n        });\n    }\n\n    handleHideModal() {\n        this.setState({\n            roomDetailOpen: false\n        });\n    }\n\n    handleChangeInputDate(val, data) {\n        this.setState({\n            CheckinDate: data.value\n        });\n    }\n\n    handleChangeInputTime(val, data) {\n        this.setState({\n            CheckinTime: data.value\n        });\n    }\n\n    render() {\n        const {roominfo, roomTypeOther} = this.props;\n        let imgsrc = roominfo.roomid ? 'images/room' + roominfo.roomid + '.png' : 'images/room101.png';\n        let CheckinDate = this.state.CheckinDate;\n        let CheckinTime = this.state.CheckinTime;\n        // console.log(this.state.CheckinTimeSelected);\n        // console.log(this.props.roominfo);\n\n        // if (isMobile.iOS() && roominfo.fromtime) {}\n\n        return (\n            <Modal style={{width: '100%'}} open={this.state.roomDetailOpen} closeIcon\n                   onClose={() => {\n                       this.setState({roomDetailOpen: false})\n                   }}\n                   trigger={<a className=\"image fit\"><img style={{boxShadow: '10px 10px 5px #ccc'}}\n                                                          onClick={this.handleShowModal}\n                                                          src=\"images/hotelico.jpeg\" alt=\"Hotel\"/></a>}>\n                <Modal.Header>Room Detail</Modal.Header>\n                <Modal.Content image scrolling style={{height: '450%'}}>\n                    <Image size='medium' src={imgsrc} wrapped/>\n                    <Modal.Description style={{width: '100%'}}>\n                        <Header>{roominfo.roomDescription}</Header>\n                        <b>\n                            Status: {this.getStatusDes(roominfo.status)}\n                        </b>\n                        <hr/>\n                        <label>\n                            <b>Checkin:</b>\n                        </label>\n                        <div>\n                            {!isMobile.iOS() ? <DateTimePicker value={this.state.CheckinTimeSelected}\n                                                               onChange={this.onChangePickedTime}/> :\n                                <div style={{width: '100%'}}><Input style={{width: '50%'}}\n                                                                    onChange={this.handleChangeInputDate}\n                                                                    value={CheckinDate} type=\"date\"\n                                                                    name=\"CheckinDate\"/>\n                                    <Input style={{width: '50%'}} onChange={this.handleChangeInputTime}\n                                           value={CheckinTime} type=\"time\" name=\"CheckinTime\"/>\n                                </div>\n                            }\n                        </div>\n                        <hr/>\n                        <div>\n                            <label>\n                                <b>Room Type:</b>\n                            </label>\n                            <Form.Select\n                                fluid\n                                icon=''\n                                // label='Room Type:'\n                                value={this.state.roomCurrentClass}\n                                options={roomTypeOther}\n                                onChange={this.handleChangeTypeIDSelect}\n                                placeholder='Type'\n                            />\n                        </div>\n                        <hr/>\n                        <Label as='a' color='teal' ribbon>\n                            Thêm Sản Phẩm:\n                        </Label>\n                        <ListOption listoptionIds={this.props.listoptionIds}\n                                    listoption={this.props.listoption}\n                                    onChangeOption={this.handleChangeOption}\n                                    optionListSelected={this.state.optionListSelected ? this.state.optionListSelected : []}/>\n                    </Modal.Description>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button primary onClick={this.checkinRoomSubmit} disabled={this.state.isSubmiting}>\n                        CheckIn\n                    </Button>\n                    <Button primary onClick={this.handleHideModal} disabled={this.state.isSubmiting}>\n                        Close\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        );\n    }\n}\n\n\nRoomDetailCheckout.propTypes = {\n    roominfo: PropTypes.object,\n    statusList: PropTypes.array,\n    roomTypeOther: PropTypes.array,\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array,\n    UpdateCheckInRoom: PropTypes.func\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { RoomDetailCheckin } from '../components/RoomDetailCheckin';\nimport { RoomDetailCheckout } from '../components/RoomDetailCheckout';\nimport 'semantic-ui-css/semantic.min.css';\n\nexport class ListRoomRows extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          open: false\n        };\n\n        [\n            'renderRow',\n            'refreshPage'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    refreshPage(){\n\n    }\n\n    renderDetail(room = []){\n        if(room.status == 1) {\n            return <RoomDetailCheckin roominfo={room}\n                                      statusList={this.props.statusList}\n                                      roomTypeOther={this.props.roomTypeOther}\n                                      listoptionIds={this.props.listoptionIds}\n                                      listoption={this.props.listoption}\n                                      UpdateCheckInRoom={this.props.UpdateCheckInRoom}/>;\n        }\n        if(room.status == 0) {\n            return <RoomDetailCheckin roominfo={room}\n                                      statusList={this.props.statusList}\n                                      roomTypeOther={this.props.roomTypeOther}\n                                      listoptionIds={this.props.listoptionIds}\n                                      listoption={this.props.listoption}\n                                      UpdateCheckInRoom={this.props.UpdateCheckInRoom}/>;\n        }\n        if(room.status == 2) {\n\n        }\n    }\n\n    renderRow() {\n        const {roomsInfo} = this.props;\n        return Array.prototype.map.call(roomsInfo, (room) => (\n            <div className=\"col-3 col-12-mobile\" key={room.roomid}>\n                <article className=\"item\">\n                    <div className=\"image fitfull\">\n                        {this.renderDetail(room)}\n                    </div>\n                    <header>\n                        {room.status == 1 ? <h2 style={{backgroundColor: '#e1eaea'}}>{room.roomid}</h2> : <h2 style={{backgroundColor: '#ffd633'}}>{room.roomid}</h2>}\n                    </header>\n                </article>\n            </div>\n        ));\n    }\n\n    render() {\n        // console.log(this.props.roomInfo);\n        return (\n            <div className=\"row\">\n                {this.renderRow()}\n            </div>\n\n        );\n    }\n}\n\nListRoomRows.defaultProps = {\n    roomsInfo: []\n}\n\nListRoomRows.propTypes = {\n    roomsInfo: PropTypes.array,\n    statusList: PropTypes.array,\n    roomTypeOther: PropTypes.array,\n    listoptionIds: PropTypes.array,\n    listoption: PropTypes.array,\n    UpdateCheckInRoom: PropTypes.func,\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Form, Input, Image, Loader, Segment, Dimmer, Label} from 'semantic-ui-react';\nimport {ListRoomRows} from '../components/ListRoomRows';\n// import {SearchingTab} from '../components/SearchingTab';\nimport 'semantic-ui-css/semantic.min.css';\nimport {toast, ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../App.css';\nconst isMobile = {\n    Android: function () {\n        return navigator.userAgent.match(/Android/i);\n    },\n    BlackBerry: function () {\n        return navigator.userAgent.match(/BlackBerry/i);\n    },\n    iOS: function () {\n        return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n    },\n    Opera: function () {\n        return navigator.userAgent.match(/Opera Mini/i);\n    },\n    Windows: function () {\n        return navigator.userAgent.match(/IEMobile/i);\n    },\n    any: function () {\n        return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());\n    }\n};\n\nexport class IndexPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoadedRooms: false,\n            isLoadedParam: false,\n            roomDetailOpen: false,\n            rooms: [],\n            roomIds: [],\n            status: [],\n            statusIds: [],\n            roomTypeOther: [],\n            roomTypeOtherIds: [],\n            listoption: [],\n            listoptionIds: [],\n            roomidselected: '',\n            statusSelected: ''\n        };\n\n        [\n            'getListRoomDetails',\n            'UpdateCheckInRoom',\n            'handleChangeRoomIDSelect',\n            'handleChangeStatusIDSelect',\n            'getListStatus',\n            'renderSearchForm',\n            'renderListRooms',\n            'getroomTypeOther',\n            'getlistoption',\n            'handleClearSearching',\n            'CheckoutRoom'\n        ].forEach((method) => this[method] = this[method].bind(this));\n    }\n\n    async getListRoomDetails(filter) {\n        console.log(\"getListRoomDetails\");\n        this.setState({\n            isLoadedRooms: false,\n        });\n        await fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listRoomsDetail\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    console.log(result);\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['roomid'];\n                        tmp2['text'] = tmp['roomDescription'];\n                        tmp2['value'] = tmp['roomid'];\n                        ids.push(tmp2);\n                    }\n                    // debugger;\n                    if (filter) {\n                        let newstr = strs.filter(function (item) {\n                            return item[filter.id] == filter.value;\n                        });\n                        this.setState({\n                            isLoadedRooms: true,\n                            rooms: newstr,\n                            roomIds: ids\n                        });\n                    } else {\n                        this.setState({\n                            isLoadedRooms: true,\n                            rooms: strs,\n                            roomIds: ids\n                        });\n                    }\n                }, (error) => {\n                    this.setState({\n                        isLoadedRooms: false,\n                    });\n                }\n            )\n    }\n\n    getListStatus() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listStatus\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['statusId'];\n                        tmp2['text'] = tmp['description'];\n                        tmp2['value'] = tmp['statusId'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        isLoadedParam: true,\n                        status: strs,\n                        statusIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoadedParam: false,\n                    });\n                }\n            )\n    }\n\n    getlistoption() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=listoption\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        ids.push(tmp['optionId']);\n                    }\n                    this.setState({\n                        isLoadedParam: true,\n                        listoption: strs,\n                        listoptionIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoadedParam: false,\n                    });\n                }\n            )\n    }\n\n    getroomTypeOther() {\n        fetch(\"https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=PricebyOther\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    let strs = [];\n                    let ids = [];\n                    let tmp = [];\n                    let tmp2 = {};\n                    for (let i = 0; i < result.length; i++) {\n                        tmp = JSON.parse(result[i])\n                        strs.push(tmp);\n                        tmp2 = {};\n                        tmp2['key'] = tmp['roomType'];\n                        tmp2['text'] = tmp['description'];\n                        tmp2['value'] = tmp['roomType'];\n                        ids.push(tmp2);\n                    }\n                    this.setState({\n                        isLoadedParam: true,\n                        roomTypeOther: strs,\n                        roomTypeOtherIds: ids\n                    });\n                }, (error) => {\n                    this.setState({\n                        isLoadedParam: false,\n                    });\n                }\n            )\n    }\n\n    async UpdateCheckInRoom(id, checkinTime, roomClass, options, totalOptionPrice, roomId) {\n        let formatted_date = '';\n        if (isMobile.iOS()) {\n            formatted_date = checkinTime;\n        } else {\n            let current_datetime = checkinTime;\n            formatted_date = current_datetime.getFullYear() + \"-\" + (current_datetime.getMonth() + 1) + \"-\" + current_datetime.getDate() + \" \" + current_datetime.getHours() + \":\" + current_datetime.getMinutes() + \":\" + current_datetime.getSeconds();\n        }\n\n        let encoded = \"checkinTime=\" + formatted_date +\n            \"&roomClass=\" + roomClass +\n            \"&options=\" + options +\n            \"&totalOptionPrice=\" + totalOptionPrice;\n\n        await fetch('https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=checkin&id=' + id, {\n            method: 'POST',\n            body: encoded,\n            headers: {\n                \"Content-type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(async function (response) {\n            let msgerr = '';\n            let isSuccess = false;\n            await response.json().then(function (data) {\n                console.log(data);\n                data['result'] == 'error' ? msgerr = JSON.stringify(data[\"error\"][\"message\"]) : isSuccess = true;\n            });\n\n            let stt = response.status;\n            if (stt == 200) {\n                if (!msgerr) {\n                    toast.success(\"Đặt phòng \" + roomId + \" thành công!\", {position: toast.POSITION.TOP_RIGHT});\n                } else {\n                    toast.error(\"Error:\" + JSON.stringify(msgerr));\n                }\n            } else {\n                toast.error(\"Something is wrong, please check log for detail!\");\n            }\n\n        }).then(() => {\n            this.handleClearSearching();\n        })\n    }\n\n    async CheckoutRoom(id, checkinTime, roomClass, options, totalOptionPrice, roomId, action, checkoutTime) {\n        let formatted_date = '';\n        if (isMobile.iOS()) {\n            formatted_date = checkinTime;\n        } else {\n            let current_datetime = checkinTime;\n            formatted_date = current_datetime.getFullYear() + \"-\" + (current_datetime.getMonth() + 1) + \"-\" + current_datetime.getDate() + \" \" + current_datetime.getHours() + \":\" + current_datetime.getMinutes() + \":\" + current_datetime.getSeconds();\n        }\n\n        let encoded = \"checkinTime=\" + formatted_date +\n            \"&roomClass=\" + roomClass +\n            \"&options=\" + options +\n            \"&totalOptionPrice=\" + totalOptionPrice;\n        if(action == \"getTotalConfirm\"){\n            await fetch('https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=checkin&id=' + id, {\n                method: 'POST',\n                body: encoded,\n                headers: {\n                    \"Content-type\": \"application/x-www-form-urlencoded\"\n                }\n            }).then(async function (response) {\n                let msgerr = '';\n                let isSuccess = false;\n                await response.json().then(function (data) {\n                    console.log(data);\n                    data['result'] == 'error' ? msgerr = JSON.stringify(data[\"error\"][\"message\"]) : isSuccess = true;\n                });\n\n                let stt = response.status;\n                if (stt == 200) {\n                    if (!msgerr) {\n                        toast.success(\"Đặt phòng \" + roomId + \" thành công!\", {position: toast.POSITION.TOP_RIGHT});\n                    } else {\n                        toast.error(\"Error:\" + JSON.stringify(msgerr));\n                    }\n                } else {\n                    toast.error(\"Something is wrong, please check log for detail!\");\n                }\n\n            })\n        }\n\n        await fetch('https://script.google.com/macros/s/AKfycby1NCjArXNvliviV9Su8imyfVXsNTUL2memG4bxJhX4JTcyoXGr/exec?func=checkin&id=' + id, {\n            method: 'POST',\n            body: encoded,\n            headers: {\n                \"Content-type\": \"application/x-www-form-urlencoded\"\n            }\n        }).then(async function (response) {\n            let msgerr = '';\n            let isSuccess = false;\n            await response.json().then(function (data) {\n                console.log(data);\n                data['result'] == 'error' ? msgerr = JSON.stringify(data[\"error\"][\"message\"]) : isSuccess = true;\n            });\n\n            let stt = response.status;\n            if (stt == 200) {\n                if (!msgerr) {\n                    toast.success(\"Đặt phòng \" + roomId + \" thành công!\", {position: toast.POSITION.TOP_RIGHT});\n                } else {\n                    toast.error(\"Error:\" + JSON.stringify(msgerr));\n                }\n            } else {\n                toast.error(\"Something is wrong, please check log for detail!\");\n            }\n\n        }).then(() => {\n            this.handleClearSearching();\n        })\n    }\n\n    handleClearSearching() {\n        this.setState({\n            roomidselected: '',\n            statusSelected: '',\n        });\n        this.getListRoomDetails();\n    }\n\n    handleChangeRoomIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            roomidselected: val['value'],\n            statusSelected: ''\n        }, () => {\n            let filter = {'id': 'roomid', 'value': val['value']};\n            this.getListRoomDetails(filter);\n        });\n    }\n\n    handleChangeStatusIDSelect(event, val = null) {\n        if (val == null)\n            return;\n        this.setState({\n            statusSelected: val['value'],\n            roomidselected: ''\n        }, () => {\n            let filter = {'id': 'status', 'value': val['value']};\n            this.getListRoomDetails(filter);\n        });\n    }\n\n    renderSearchForm() {\n        if (this.state.isLoadedParam == false) {\n            return (<Segment>\n                <Dimmer active inverted>\n                    <Loader size='large'>Loading</Loader>\n                </Dimmer>\n                <Image src='images/loader.png'/>\n            </Segment>);\n        }\n\n        let listRoomIds = this.state.roomIds;\n        let listStatusIds = this.state.statusIds;\n        let styleDisable = {'pointerEvents': ''};\n        // debugger;\n        if (!this.state.isLoadedRooms || !this.state.isLoadedParam) {\n            styleDisable = {'pointerEvents': 'none'};\n        }\n        var newlistRoomIds = '';\n        if (listRoomIds.length > 0){\n            listRoomIds.map((item) => {\n                let tmp = {\n                    title: item.key,\n                    description: item.text\n                }\n                item['title'] = item.key;\n                item['description'] = item.text;\n            });\n        }\n        return (\n            <Segment padded style={styleDisable}>\n                {/*{listRoomIds.length > 0 && <SearchingTab listRoomId={listRoomIds}/>}*/}\n                {/*<Input fluid icon='search plus' action='Search' placeholder='Search...'/>*/}\n                <Label attached='top left' onClick={this.handleClearSearching}>Refresh</Label>\n                <br/>\n                <Form.Group widths='equal'>\n                    <Form.Select\n                        fluid\n                        icon=''\n                        label='Lọc theo Phòng'\n                        value={this.state.roomidselected}\n                        onChange={this.handleChangeRoomIDSelect}\n                        options={listRoomIds}\n                        placeholder='RoomIDs'\n                    />\n                    <Form.Select\n                        fluid\n                        icon=''\n                        label='Lọc theo trạng thái'\n                        value={this.state.statusSelected}\n                        options={listStatusIds}\n                        onChange={this.handleChangeStatusIDSelect}\n                        placeholder='Status'\n                    />\n                </Form.Group>\n            </Segment>\n        );\n    }\n\n    renderListRooms() {\n        const {rooms, statusIds, roomTypeOtherIds, listoptionIds, listoption} = {...this.state};\n\n        if (this.state.isLoadedRooms == false) {\n            return (<Segment>\n                <Dimmer active inverted>\n                    <Loader size='large'>Loading</Loader>\n                </Dimmer>\n                <Image src='images/loader.png'/>\n            </Segment>);\n        }\n\n        return (\n            <Segment padded>\n                <Label attached='top'>Room List</Label>\n                <ListRoomRows roomsInfo={rooms}\n                              statusList={statusIds}\n                              roomTypeOther={roomTypeOtherIds}\n                              listoptionIds={listoptionIds}\n                              listoption={listoption}\n                              UpdateCheckInRoom={this.UpdateCheckInRoom}\n                />\n            </Segment>\n        );\n    }\n\n    componentDidMount() {\n        this.getListRoomDetails();\n        this.getListStatus();\n        this.getroomTypeOther();\n        this.getlistoption();\n    }\n\n    render() {\n        // console.log(this.state.statusIds);\n        // console.log(this.state.statusSelected);\n        return (\n            <div>\n                <ToastContainer style={{fontSize: '20px', textAlign: 'center'}}/>\n                <Form>\n                    {this.renderSearchForm()}\n                    {this.renderListRooms()}\n                </Form>\n                <br/><br/>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {IndexPage} from './containers/IndexPage';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css'\n\nclass ThaiBinhHotel extends React.Component{\n    render(){\n        return <IndexPage/>;\n    }\n}\n\nReactDOM.render(<ThaiBinhHotel />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}